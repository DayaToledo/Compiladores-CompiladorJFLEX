
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jan 23 18:23:00 BRT 2023
//----------------------------------------------------

package cup;

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jan 23 18:23:00 BRT 2023
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\007\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\004" +
    "\000\002\004\003\000\002\005\005\000\002\006\003\000" +
    "\002\006\002\000\002\007\004\000\002\010\004\000\002" +
    "\011\004\000\002\011\002\000\002\012\005\000\002\013" +
    "\003\000\002\013\002\000\002\014\005\000\002\015\005" +
    "\000\002\015\004\000\002\016\004\000\002\016\003\000" +
    "\002\017\006\000\002\020\006\000\002\020\005\000\002" +
    "\021\005\000\002\021\002\000\002\022\006\000\002\023" +
    "\005\000\002\023\002\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\025\005\000\002\030\007\000\002\031\002\000\002" +
    "\031\004\000\002\032\006\000\002\033\004\000\002\034" +
    "\004\000\002\034\002\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\036\005\000\002\036\005\000\002" +
    "\036\004\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\002\000\002\040\004\000\002\041\005" +
    "\000\002\041\005\000\002\041\005\000\002\041\002\000" +
    "\002\042\003\000\002\042\003\000\002\042\005\000\002" +
    "\042\004\000\002\042\003\000\002\042\003\000\002\042" +
    "\004\000\002\042\004\000\002\043\003\000\002\044\004" +
    "\000\002\045\005\000\002\045\002\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\026\004\000\002" +
    "\027\005\000\002\027\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\004\005\001\002\000\004\002\222\001" +
    "\002\000\004\051\006\001\002\000\004\022\007\001\002" +
    "\000\014\003\015\006\010\007\014\020\013\021\017\001" +
    "\002\000\004\051\172\001\002\000\004\007\014\001\002" +
    "\000\004\025\170\001\002\000\010\022\uffb7\027\uffb7\051" +
    "\uffb7\001\002\000\012\007\014\011\053\014\046\051\050" +
    "\001\002\000\010\022\uffb6\027\uffb6\051\uffb6\001\002\000" +
    "\004\051\037\001\002\000\010\022\uffb8\027\uffb8\051\uffb8" +
    "\001\002\000\004\022\033\001\002\000\004\025\ufffd\001" +
    "\002\000\006\006\010\007\014\001\002\000\004\022\024" +
    "\001\002\000\014\003\015\006\ufff8\007\ufff8\020\013\021" +
    "\017\001\002\000\006\006\ufffa\007\ufffa\001\002\000\006" +
    "\006\ufff9\007\ufff9\001\002\000\004\025\ufffb\001\002\000" +
    "\004\025\uffff\001\002\000\004\007\014\001\002\000\004" +
    "\025\ufffc\001\002\000\006\006\010\007\ufff1\001\002\000" +
    "\004\007\ufff2\001\002\000\004\007\ufff3\001\002\000\004" +
    "\022\ufff7\001\002\000\010\022\ufff4\023\ufff4\024\041\001" +
    "\002\000\006\022\ufff6\023\ufff6\001\002\000\004\051\037" +
    "\001\002\000\006\022\ufff5\023\ufff5\001\002\000\006\010" +
    "\uffe4\022\163\001\002\000\010\010\uffe2\013\uffe2\022\uffe2" +
    "\001\002\000\010\010\uffe0\013\uffe0\022\uffe0\001\002\000" +
    "\024\016\061\017\056\026\071\027\067\037\064\040\055" +
    "\045\057\047\070\051\066\001\002\000\010\010\uffe3\013" +
    "\uffe3\022\uffe3\001\002\000\014\010\uffb3\013\uffb3\022\uffb3" +
    "\026\145\030\146\001\002\000\010\010\uffdf\013\uffdf\022" +
    "\uffdf\001\002\000\010\010\uffe1\013\uffe1\022\uffe1\001\002" +
    "\000\024\016\061\017\056\026\071\027\067\037\064\040" +
    "\055\045\057\047\070\051\066\001\002\000\034\010\uffd7" +
    "\012\uffd7\013\uffd7\015\uffd7\022\uffd7\024\uffd7\027\uffd7\031" +
    "\136\032\135\033\140\034\137\035\134\036\142\001\002" +
    "\000\020\016\061\017\056\026\071\027\067\045\057\047" +
    "\070\051\066\001\002\000\050\010\uffc0\012\uffc0\013\uffc0" +
    "\015\uffc0\022\uffc0\024\uffc0\027\uffc0\031\uffc0\032\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\001\002\000\020\016\061\017" +
    "\056\026\071\027\067\045\057\047\070\051\066\001\002" +
    "\000\050\010\uffc5\012\uffc5\013\uffc5\015\uffc5\022\uffc5\024" +
    "\uffc5\027\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\037\uffc5\040\uffc5\041\122\042\121\043\uffc5\044" +
    "\117\001\002\000\050\010\uffbf\012\uffbf\013\uffbf\015\uffbf" +
    "\022\uffbf\024\uffbf\027\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\043\uffbf\044\uffbf\001\002\000\042\010\uffca\012\uffca\013" +
    "\uffca\015\uffca\022\uffca\024\uffca\027\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\037\077\040\100\043" +
    "\101\001\002\000\004\012\111\001\002\000\020\016\061" +
    "\017\056\026\071\027\067\045\057\047\070\051\066\001" +
    "\002\000\050\010\uffc4\012\uffc4\013\uffc4\015\uffc4\022\uffc4" +
    "\024\uffc4\027\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\001\002\000\050\010\uffbc\012\uffbc\013\uffbc\015" +
    "\uffbc\022\uffbc\024\uffbc\027\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\001\002\000\004\003\075\001\002" +
    "\000\050\010\uffc3\012\uffc3\013\uffc3\015\uffc3\022\uffc3\024" +
    "\uffc3\027\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\001\002\000\026\003\073\016\061\017\056\026\071" +
    "\027\067\037\064\040\055\045\057\047\070\051\066\001" +
    "\002\000\004\027\074\001\002\000\050\010\uffbe\012\uffbe" +
    "\013\uffbe\015\uffbe\022\uffbe\024\uffbe\027\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\044\uffbe\001\002\000\050\010" +
    "\uffc2\012\uffc2\013\uffc2\015\uffc2\022\uffc2\024\uffc2\027\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\001\002" +
    "\000\050\010\uffbd\012\uffbd\013\uffbd\015\uffbd\022\uffbd\024" +
    "\uffbd\027\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\001\002\000\042\010\uffca\012\uffca\013\uffca\015\uffca" +
    "\022\uffca\024\uffca\027\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\077\040\100\043\101\001\002" +
    "\000\020\016\061\017\056\026\071\027\067\045\057\047" +
    "\070\051\066\001\002\000\020\016\061\017\056\026\071" +
    "\027\067\045\057\047\070\051\066\001\002\000\020\016" +
    "\061\017\056\026\071\027\067\045\057\047\070\051\066" +
    "\001\002\000\034\010\uffd0\012\uffd0\013\uffd0\015\uffd0\022" +
    "\uffd0\024\uffd0\027\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\001\002\000\042\010\uffca\012\uffca\013" +
    "\uffca\015\uffca\022\uffca\024\uffca\027\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\037\077\040\100\043" +
    "\101\001\002\000\034\010\uffcb\012\uffcb\013\uffcb\015\uffcb" +
    "\022\uffcb\024\uffcb\027\uffcb\031\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\001\002\000\042\010\uffca\012\uffca" +
    "\013\uffca\015\uffca\022\uffca\024\uffca\027\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\077\040\100" +
    "\043\101\001\002\000\034\010\uffcc\012\uffcc\013\uffcc\015" +
    "\uffcc\022\uffcc\024\uffcc\027\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\001\002\000\042\010\uffca\012" +
    "\uffca\013\uffca\015\uffca\022\uffca\024\uffca\027\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\077\040" +
    "\100\043\101\001\002\000\034\010\uffcd\012\uffcd\013\uffcd" +
    "\015\uffcd\022\uffcd\024\uffcd\027\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\001\002\000\012\007\014" +
    "\011\053\014\046\051\050\001\002\000\010\010\uffdc\013" +
    "\113\022\uffdc\001\002\000\012\007\014\011\053\014\046" +
    "\051\050\001\002\000\010\010\uffdd\013\uffdd\022\uffdd\001" +
    "\002\000\010\010\uffdb\013\uffdb\022\uffdb\001\002\000\034" +
    "\010\uffce\012\uffce\013\uffce\015\uffce\022\uffce\024\uffce\027" +
    "\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\001\002\000\020\016\061\017\056\026\071\027\067\045" +
    "\057\047\070\051\066\001\002\000\042\010\uffc9\012\uffc9" +
    "\013\uffc9\015\uffc9\022\uffc9\024\uffc9\027\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\043\uffc9\001\002\000\020\016\061\017\056\026\071\027" +
    "\067\045\057\047\070\051\066\001\002\000\020\016\061" +
    "\017\056\026\071\027\067\045\057\047\070\051\066\001" +
    "\002\000\050\010\uffc5\012\uffc5\013\uffc5\015\uffc5\022\uffc5" +
    "\024\uffc5\027\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\122\042\121\043\uffc5" +
    "\044\117\001\002\000\042\010\uffc8\012\uffc8\013\uffc8\015" +
    "\uffc8\022\uffc8\024\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\043\uffc8\001" +
    "\002\000\050\010\uffc5\012\uffc5\013\uffc5\015\uffc5\022\uffc5" +
    "\024\uffc5\027\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\122\042\121\043\uffc5" +
    "\044\117\001\002\000\042\010\uffc6\012\uffc6\013\uffc6\015" +
    "\uffc6\022\uffc6\024\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\043\uffc6\001" +
    "\002\000\050\010\uffc5\012\uffc5\013\uffc5\015\uffc5\022\uffc5" +
    "\024\uffc5\027\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\122\042\121\043\uffc5" +
    "\044\117\001\002\000\042\010\uffc7\012\uffc7\013\uffc7\015" +
    "\uffc7\022\uffc7\024\uffc7\027\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\043\uffc7\001" +
    "\002\000\050\010\uffc1\012\uffc1\013\uffc1\015\uffc1\022\uffc1" +
    "\024\uffc1\027\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\044\uffc1\001\002\000\042\010\uffca\012\uffca\013\uffca\015" +
    "\uffca\022\uffca\024\uffca\027\uffca\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\037\077\040\100\043\101\001" +
    "\002\000\034\010\uffcf\012\uffcf\013\uffcf\015\uffcf\022\uffcf" +
    "\024\uffcf\027\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\001\002\000\024\016\uffd5\017\uffd5\026\uffd5" +
    "\027\uffd5\037\uffd5\040\uffd5\045\uffd5\047\uffd5\051\uffd5\001" +
    "\002\000\024\016\uffd1\017\uffd1\026\uffd1\027\uffd1\037\uffd1" +
    "\040\uffd1\045\uffd1\047\uffd1\051\uffd1\001\002\000\024\016" +
    "\uffd3\017\uffd3\026\uffd3\027\uffd3\037\uffd3\040\uffd3\045\uffd3" +
    "\047\uffd3\051\uffd3\001\002\000\024\016\uffd2\017\uffd2\026" +
    "\uffd2\027\uffd2\037\uffd2\040\uffd2\045\uffd2\047\uffd2\051\uffd2" +
    "\001\002\000\024\016\uffd4\017\uffd4\026\uffd4\027\uffd4\037" +
    "\uffd4\040\uffd4\045\uffd4\047\uffd4\051\uffd4\001\002\000\024" +
    "\016\061\017\056\026\071\027\067\037\064\040\055\045" +
    "\057\047\070\051\066\001\002\000\024\016\uffd6\017\uffd6" +
    "\026\uffd6\027\uffd6\037\uffd6\040\uffd6\045\uffd6\047\uffd6\051" +
    "\uffd6\001\002\000\020\010\uffd9\012\uffd9\013\uffd9\015\uffd9" +
    "\022\uffd9\024\uffd9\027\uffd9\001\002\000\020\010\uffd8\012" +
    "\uffd8\013\uffd8\015\uffd8\022\uffd8\024\uffd8\027\uffd8\001\002" +
    "\000\024\016\061\017\056\026\071\027\067\037\064\040" +
    "\055\045\057\047\070\051\066\001\002\000\024\016\061" +
    "\017\056\026\071\027\067\037\064\040\055\045\057\047" +
    "\070\051\066\001\002\000\010\010\uffb5\013\uffb5\022\uffb5" +
    "\001\002\000\010\010\uffde\013\uffde\022\uffde\001\002\000" +
    "\004\027\157\001\002\000\006\024\154\027\uffb9\001\002" +
    "\000\004\027\uffbb\001\002\000\024\016\061\017\056\026" +
    "\071\027\067\037\064\040\055\045\057\047\070\051\066" +
    "\001\002\000\006\024\154\027\uffb9\001\002\000\004\027" +
    "\uffba\001\002\000\010\010\uffb4\013\uffb4\022\uffb4\001\002" +
    "\000\004\015\161\001\002\000\012\007\014\011\053\014" +
    "\046\051\050\001\002\000\010\010\uffda\013\uffda\022\uffda" +
    "\001\002\000\012\007\014\011\053\014\046\051\050\001" +
    "\002\000\004\010\165\001\002\000\012\010\uffe6\013\uffe6" +
    "\022\uffe6\025\uffe6\001\002\000\006\010\uffe4\022\163\001" +
    "\002\000\004\010\uffe5\001\002\000\004\002\001\001\002" +
    "\000\004\025\ufffe\001\002\000\006\022\173\026\174\001" +
    "\002\000\012\003\015\007\014\020\013\021\017\001\002" +
    "\000\006\005\206\051\037\001\002\000\004\022\177\001" +
    "\002\000\004\022\ufff0\001\002\000\012\003\015\007\014" +
    "\020\013\021\017\001\002\000\004\022\uffef\001\002\000" +
    "\004\007\014\001\002\000\004\022\uffec\001\002\000\004" +
    "\022\uffed\001\002\000\006\022\214\027\uffe7\001\002\000" +
    "\004\023\212\001\002\000\004\051\037\001\002\000\004" +
    "\023\210\001\002\000\010\003\015\020\013\021\017\001" +
    "\002\000\006\022\uffea\027\uffea\001\002\000\010\003\015" +
    "\020\013\021\017\001\002\000\006\022\uffe9\027\uffe9\001" +
    "\002\000\006\005\206\051\037\001\002\000\004\027\216" +
    "\001\002\000\004\022\uffeb\001\002\000\006\022\214\027" +
    "\uffe7\001\002\000\004\027\uffe8\001\002\000\004\022\uffee" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\011\005\021" +
    "\007\022\012\010\014\017\022\020\046\015\001\001\000" +
    "\002\001\001\000\004\022\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\022\051\024\042\025\046\026" +
    "\043\030\044\032\050\001\001\000\002\001\001\000\004" +
    "\010\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\027\012\030\014\017\022\026" +
    "\001\001\000\002\001\001\000\012\005\025\006\024\007" +
    "\022\046\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\031\001" +
    "\001\000\002\001\001\000\010\012\033\013\034\014\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\037\001\001\000\002\001\001\000\004" +
    "\010\041\001\001\000\002\001\001\000\004\023\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\033\157" +
    "\036\053\040\061\042\057\043\064\001\001\000\002\001" +
    "\001\000\004\027\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\033\062\036\053\040\061\042\057\043" +
    "\064\001\001\000\006\034\142\035\140\001\001\000\010" +
    "\040\131\042\057\043\064\001\001\000\002\001\001\000" +
    "\006\042\130\043\064\001\001\000\004\041\117\001\001" +
    "\000\002\001\001\000\004\037\115\001\001\000\002\001" +
    "\001\000\010\040\075\042\057\043\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\033\071\036\053\040\061\042\057\043\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\101\001\001\000\010" +
    "\040\106\042\057\043\064\001\001\000\010\040\104\042" +
    "\057\043\064\001\001\000\010\040\102\042\057\043\064" +
    "\001\001\000\002\001\001\000\004\037\103\001\001\000" +
    "\002\001\001\000\004\037\105\001\001\000\002\001\001" +
    "\000\004\037\107\001\001\000\002\001\001\000\016\022" +
    "\051\024\111\025\046\026\043\030\044\032\050\001\001" +
    "\000\004\031\113\001\001\000\016\022\051\024\114\025" +
    "\046\026\043\030\044\032\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\126\043" +
    "\064\001\001\000\002\001\001\000\006\042\124\043\064" +
    "\001\001\000\006\042\122\043\064\001\001\000\004\041" +
    "\123\001\001\000\002\001\001\000\004\041\125\001\001" +
    "\000\002\001\001\000\004\041\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\036\143" +
    "\040\061\042\057\043\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\033\151\036\053" +
    "\040\061\042\057\043\064\044\150\001\001\000\014\033" +
    "\147\036\053\040\061\042\057\043\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\152\001\001\000\002\001\001\000\014\033\154\036\053" +
    "\040\061\042\057\043\064\001\001\000\004\045\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\022\051\024\161\025\046\026\043\030\044\032" +
    "\050\001\001\000\002\001\001\000\016\022\051\024\165" +
    "\025\046\026\043\030\044\032\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\175\017\174\001\001\000\014\005\200\007\022\016\220" +
    "\022\201\046\015\001\001\000\006\010\204\020\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\200" +
    "\007\022\016\177\022\201\046\015\001\001\000\002\001" +
    "\001\000\004\022\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\214\001\001\000\002\001\001\000" +
    "\004\010\206\001\001\000\002\001\001\000\004\046\210" +
    "\001\001\000\002\001\001\000\004\046\212\001\001\000" +
    "\002\001\001\000\006\010\204\020\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   private ArrayList<String> errors;

   public parser(Scanner scanner, ArrayList<String> errors){
      super(scanner);
      this.errors = errors;
   }

   public int error_sync_size(){
      return 1;
   }

   public void report_error(String message, Object info) {
      StringBuilder messageError = new StringBuilder("Error");
   
      if (info instanceof java_cup.runtime.Symbol) {
         java_cup.runtime.Symbol symbol = ((java_cup.runtime.Symbol) info);
   
         if (symbol.left >= 0) {                
            messageError.append(" in line "+(symbol.left+1));   
            if (symbol.right >= 0)                    
               messageError.append(", column "+(symbol.right+1));
         }
      }
   
      messageError.append(" : " + message);
      System.err.println(messageError);
   }
   
   public void report_fatal_error(String message, Object info) {
      report_error(message, info);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // chamada_funcao_2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chamada_funcao_2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // chamada_funcao_2 ::= ABRE_PARENTESES lista_expressoes FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chamada_funcao_2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // chamada_funcao ::= IDENTIFICADOR chamada_funcao_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chamada_funcao",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipo ::= error 
            {
              Object RESULT =null;
		System.err.println("Esperava receber int ou boolean");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipo ::= RESERVADO_INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipo ::= RESERVADO_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // lista_expressoes_2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expressoes_2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lista_expressoes_2 ::= VIRGULA expressao lista_expressoes_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expressoes_2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lista_expressoes ::= expressao lista_expressoes_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expressoes",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // variavel ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variavel",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // fator ::= FECHA_PARENTESES error 
            {
              Object RESULT =null;
		System.out.println("O parenteses não foi aberto!");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fator",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // fator ::= ABRE_PARENTESES error 
            {
              Object RESULT =null;
		System.out.println("O parenteses não foi fechado!");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fator",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // fator ::= RESERVADO_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fator",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // fator ::= RESERVADO_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fator",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // fator ::= OPERACAO_NOT fator 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fator",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // fator ::= ABRE_PARENTESES expressao FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fator",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // fator ::= NUMERO_INTEIRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fator",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // fator ::= variavel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fator",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista_termos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_termos",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_termos ::= OPERACAO_MULT fator lista_termos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_termos",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista_termos ::= OPERACAO_AND fator lista_termos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_termos",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // lista_termos ::= OPERACAO_DIV fator lista_termos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_termos",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // termo ::= fator lista_termos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lista_expressao_simples ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expressao_simples",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // lista_expressao_simples ::= OPERACAO_OR termo lista_expressao_simples 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expressao_simples",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // lista_expressao_simples ::= OPERACAO_SUB termo lista_expressao_simples 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expressao_simples",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lista_expressao_simples ::= OPERACAO_SOMA termo lista_expressao_simples 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expressao_simples",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expressao_simples ::= termo lista_expressao_simples 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_simples",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expressao_simples ::= OPERACAO_SUB termo lista_expressao_simples 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_simples",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expressao_simples ::= OPERACAO_SOMA termo lista_expressao_simples 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_simples",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operacao_relacional ::= OPERACAO_MAIOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_relacional",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operacao_relacional ::= OPERACAO_MAIOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_relacional",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operacao_relacional ::= OPERACAO_MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_relacional",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operacao_relacional ::= OPERACAO_MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_relacional",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operacao_relacional ::= OPERACAO_DIFERENTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_relacional",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operacao_relacional ::= OPERACAO_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_relacional",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expressao_2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expressao_2 ::= operacao_relacional expressao_simples 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expressao ::= expressao_simples expressao_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comando_repetitivo ::= RESERVADO_WHILE expressao RESERVADO_DO comando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comando_condicional_2 ::= RESERVADO_ELSE comando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando_condicional_2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comando_condicional_2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando_condicional_2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comando_condicional ::= RESERVADO_IF expressao RESERVADO_THEN comando comando_condicional_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando_condicional",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // atribuicao ::= IDENTIFICADOR SIMBOLO_ATRIBUICAO expressao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comando ::= comando_repetitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comando ::= comando_condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comando ::= comando_composto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comando ::= chamada_funcao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comando ::= atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_comandos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_comandos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_comandos ::= PONTO_VIRGULA comando lista_comandos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_comandos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comando_composto ::= RESERVADO_BEGIN comando lista_comandos RESERVADO_END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando_composto",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // proc_lista_parametros_2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_lista_parametros_2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // proc_lista_parametros_2 ::= PONTO_VIRGULA proc_lista_parametros proc_lista_parametros_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_lista_parametros_2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // proc_lista_parametros ::= lista_variaveis DOIS_PONTOS tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_lista_parametros",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // proc_lista_parametros ::= RESERVADO_VAR lista_variaveis DOIS_PONTOS tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_lista_parametros",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // proc_parametros ::= ABRE_PARENTESES proc_lista_parametros proc_lista_parametros_2 FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_parametros",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declara_proc_3 ::= comando_composto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara_proc_3",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declara_proc_3 ::= lista_declara_variavel comando_composto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara_proc_3",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declara_proc_2 ::= PONTO_VIRGULA declara_proc_3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara_proc_2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declara_proc_2 ::= proc_parametros PONTO_VIRGULA declara_proc_3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara_proc_2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declara_procedure ::= RESERVADO_PROCEDURE IDENTIFICADOR declara_proc_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara_procedure",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_declara_proc_2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declara_proc_2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_declara_proc_2 ::= lista_declara_procedure 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declara_proc_2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_declara_procedure ::= declara_procedure PONTO_VIRGULA lista_declara_proc_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declara_procedure",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_variaveis_2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variaveis_2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_variaveis_2 ::= VIRGULA lista_variaveis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variaveis_2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_variaveis ::= IDENTIFICADOR lista_variaveis_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variaveis",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declara_variavel ::= tipo lista_variaveis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara_variavel",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_declara_variavel_2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declara_variavel_2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_declara_variavel_2 ::= lista_declara_variavel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declara_variavel_2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_declara_variavel ::= declara_variavel PONTO_VIRGULA lista_declara_variavel_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declara_variavel",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // apos_lista_declara_variavel ::= comando_composto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("apos_lista_declara_variavel",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // apos_lista_declara_variavel ::= lista_declara_procedure comando_composto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("apos_lista_declara_variavel",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloco_codigo ::= comando_composto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_codigo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloco_codigo ::= lista_declara_procedure comando_composto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_codigo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloco_codigo ::= lista_declara_variavel apos_lista_declara_variavel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_codigo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= declaracao_programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // declaracao_programa ::= RESERVADO_PROGRAM IDENTIFICADOR PONTO_VIRGULA bloco_codigo PONTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

