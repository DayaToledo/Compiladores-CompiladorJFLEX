/* The following code was generated by JFlex 1.6.1 */

package lexicon;
import java_cup.runtime.*;
import cup.sym;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Teste/Documents/Unesp/Compiladores/ProjetoFinal/src/lexicon/flexCode.txt</tt>
 */
public class LexiconParser implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\46\1\51\1\51\1\1\22\0\1\1\7\0\1\32"+
    "\1\33\1\41\1\37\1\30\1\40\1\31\1\45\12\42\1\27\1\26"+
    "\1\35\1\34\1\36\2\0\32\43\4\0\1\43\1\0\1\6\1\15"+
    "\1\11\1\13\1\12\1\20\1\5\1\22\1\16\2\43\1\23\1\7"+
    "\1\17\1\4\1\2\1\43\1\3\1\24\1\21\1\14\1\10\1\25"+
    "\3\43\1\47\1\44\1\50\7\0\1\51\u1fa2\0\1\51\1\51\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\15\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\2\1\1\1\21\1\22\2\3\1\23\4\3"+
    "\1\24\4\3\1\25\5\3\1\26\1\27\1\30\1\31"+
    "\1\32\1\27\2\33\2\3\1\34\1\35\1\36\1\3"+
    "\1\37\2\3\1\40\1\41\4\3\1\42\3\3\1\43"+
    "\3\3\1\44\1\45\5\3\1\46\1\47\1\50\5\3"+
    "\1\51\1\3\1\52\3\3\1\53\6\3\u03da\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[1096];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\52\0\124\0\176\0\250\0\322\0\374"+
    "\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c"+
    "\0\52\0\u0276\0\52\0\u02a0\0\52\0\52\0\52\0\u02ca"+
    "\0\u02f4\0\52\0\52\0\52\0\u031e\0\176\0\u0348\0\u0372"+
    "\0\52\0\u039c\0\u03c6\0\u039c\0\u03f0\0\u041a\0\u0444\0\u046e"+
    "\0\u039c\0\u0498\0\u04c2\0\u04ec\0\u0516\0\u039c\0\u0540\0\u056a"+
    "\0\u0594\0\u05be\0\u05e8\0\52\0\u02a0\0\52\0\52\0\52"+
    "\0\u0612\0\u063c\0\52\0\u0666\0\u0690\0\u0666\0\u0666\0\u0666"+
    "\0\u06ba\0\u0666\0\u06e4\0\u070e\0\u0666\0\u0666\0\u0738\0\u0762"+
    "\0\u078c\0\u07b6\0\u0612\0\u07e0\0\u080a\0\u0834\0\u07e0\0\u085e"+
    "\0\u0888\0\u08b2\0\u07e0\0\u07e0\0\u08dc\0\u0906\0\u0930\0\u095a"+
    "\0\u0984\0\u0906\0\u0906\0\u0906\0\u09ae\0\u09d8\0\u0a02\0\u0a2c"+
    "\0\u0a56\0\u0a56\0\u0a80\0\u0a56\0\u0aaa\0\u0ad4\0\u0afe\0\u0afe"+
    "\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e"+
    "\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e"+
    "\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4\0\u0eee"+
    "\0\u0f18\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea\0\u1014\0\u103e"+
    "\0\u1068\0\u1092\0\u10bc\0\u10e6\0\u1110\0\u113a\0\u1164\0\u118e"+
    "\0\u11b8\0\u11e2\0\u120c\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de"+
    "\0\u1308\0\u1332\0\u135c\0\u1386\0\u13b0\0\u13da\0\u1404\0\u142e"+
    "\0\u1458\0\u1482\0\u14ac\0\u14d6\0\u1500\0\u152a\0\u1554\0\u157e"+
    "\0\u15a8\0\u15d2\0\u15fc\0\u1626\0\u1650\0\u167a\0\u16a4\0\u16ce"+
    "\0\u16f8\0\u1722\0\u174c\0\u1776\0\u17a0\0\u17ca\0\u17f4\0\u181e"+
    "\0\u1848\0\u1872\0\u189c\0\u18c6\0\u18f0\0\u191a\0\u1944\0\u196e"+
    "\0\u1998\0\u19c2\0\u19ec\0\u1a16\0\u1a40\0\u1a6a\0\u1a94\0\u1abe"+
    "\0\u1ae8\0\u1b12\0\u1b3c\0\u1b66\0\u1b90\0\u1bba\0\u1be4\0\u1c0e"+
    "\0\u1c38\0\u1c62\0\u1c8c\0\u1cb6\0\u1ce0\0\u1d0a\0\u1d34\0\u1d5e"+
    "\0\u1d88\0\u1db2\0\u1ddc\0\u1e06\0\u1e30\0\u1e5a\0\u1e84\0\u1eae"+
    "\0\u1ed8\0\u1f02\0\u1f2c\0\u1f56\0\u1f80\0\u1faa\0\u1fd4\0\u1ffe"+
    "\0\u2028\0\u2052\0\u207c\0\u20a6\0\u20d0\0\u20fa\0\u2124\0\u214e"+
    "\0\u2178\0\u21a2\0\u21cc\0\u21f6\0\u2220\0\u224a\0\u2274\0\u229e"+
    "\0\u22c8\0\u22f2\0\u231c\0\u2346\0\u2370\0\u239a\0\u23c4\0\u23ee"+
    "\0\u2418\0\u2442\0\u246c\0\u2496\0\u24c0\0\u24ea\0\u2514\0\u253e"+
    "\0\u2568\0\u2592\0\u25bc\0\u25e6\0\u2610\0\u263a\0\u2664\0\u268e"+
    "\0\u26b8\0\u26e2\0\u270c\0\u2736\0\u2760\0\u278a\0\u27b4\0\u27de"+
    "\0\u2808\0\u2832\0\u285c\0\u2886\0\u28b0\0\u28da\0\u2904\0\u292e"+
    "\0\u2958\0\u2982\0\u29ac\0\u29d6\0\u2a00\0\u2a2a\0\u2a54\0\u2a7e"+
    "\0\u2aa8\0\u2ad2\0\u2afc\0\u2b26\0\u2b50\0\u2b7a\0\u2ba4\0\u2bce"+
    "\0\u2bf8\0\u2c22\0\u2c4c\0\u2c76\0\u2ca0\0\u2cca\0\u2cf4\0\u2d1e"+
    "\0\u2d48\0\u2d72\0\u2d9c\0\u2dc6\0\u2df0\0\u2e1a\0\u2e44\0\u2e6e"+
    "\0\u2e98\0\u2ec2\0\u2eec\0\u2f16\0\u2f40\0\u2f6a\0\u2f94\0\u2fbe"+
    "\0\u2fe8\0\u3012\0\u303c\0\u3066\0\u3090\0\u30ba\0\u30e4\0\u310e"+
    "\0\u3138\0\u3162\0\u318c\0\u31b6\0\u31e0\0\u320a\0\u3234\0\u325e"+
    "\0\u3288\0\u32b2\0\u32dc\0\u3306\0\u3330\0\u335a\0\u3384\0\u33ae"+
    "\0\u33d8\0\u3402\0\u342c\0\u3456\0\u3480\0\u34aa\0\u34d4\0\u34fe"+
    "\0\u3528\0\u3552\0\u357c\0\u35a6\0\u35d0\0\u35fa\0\u3624\0\u364e"+
    "\0\u3678\0\u36a2\0\u36cc\0\u36f6\0\u3720\0\u374a\0\u3774\0\u379e"+
    "\0\u37c8\0\u37f2\0\u381c\0\u3846\0\u3870\0\u389a\0\u38c4\0\u38ee"+
    "\0\u3918\0\u3942\0\u396c\0\u3996\0\u39c0\0\u39ea\0\u3a14\0\u3a3e"+
    "\0\u3a68\0\u3a92\0\u3abc\0\u3ae6\0\u3b10\0\u3b3a\0\u3b64\0\u3b8e"+
    "\0\u3bb8\0\u3be2\0\u3c0c\0\u3c36\0\u3c60\0\u3c8a\0\u3cb4\0\u3cde"+
    "\0\u3d08\0\u3d32\0\u3d5c\0\u3d86\0\u3db0\0\u3dda\0\u3e04\0\u3e2e"+
    "\0\u3e58\0\u3e82\0\u3eac\0\u3ed6\0\u3f00\0\u3f2a\0\u3f54\0\u3f7e"+
    "\0\u3fa8\0\u3fd2\0\u3ffc\0\u4026\0\u4050\0\u407a\0\u40a4\0\u40ce"+
    "\0\u40f8\0\u4122\0\u414c\0\u4176\0\u41a0\0\u41ca\0\u41f4\0\u421e"+
    "\0\u4248\0\u4272\0\u429c\0\u42c6\0\u42f0\0\u431a\0\u4344\0\u436e"+
    "\0\u4398\0\u43c2\0\u43ec\0\u4416\0\u4440\0\u446a\0\u4494\0\u44be"+
    "\0\u44e8\0\u4512\0\u453c\0\u4566\0\u4590\0\u45ba\0\u45e4\0\u460e"+
    "\0\u4638\0\u4662\0\u468c\0\u46b6\0\u46e0\0\u470a\0\u4734\0\u475e"+
    "\0\u4788\0\u47b2\0\u47dc\0\u4806\0\u4830\0\u485a\0\u4884\0\u48ae"+
    "\0\u48d8\0\u4902\0\u492c\0\u4956\0\u4980\0\u49aa\0\u49d4\0\u49fe"+
    "\0\u4a28\0\u4a52\0\u4a7c\0\u4aa6\0\u4ad0\0\u4afa\0\u4b24\0\u4b4e"+
    "\0\u4b78\0\u4ba2\0\u4bcc\0\u4bf6\0\u4c20\0\u4c4a\0\u4c74\0\u4c9e"+
    "\0\u4cc8\0\u4cf2\0\u4d1c\0\u4d46\0\u4d70\0\u4d9a\0\u4dc4\0\u4dee"+
    "\0\u4e18\0\u4e42\0\u4e6c\0\u4e96\0\u4ec0\0\u4eea\0\u4f14\0\u4f3e"+
    "\0\u4f68\0\u4f92\0\u4fbc\0\u4fe6\0\u5010\0\u503a\0\u5064\0\u508e"+
    "\0\u50b8\0\u50e2\0\u510c\0\u5136\0\u5160\0\u518a\0\u51b4\0\u51de"+
    "\0\u5208\0\u5232\0\u525c\0\u5286\0\u52b0\0\u52da\0\u5304\0\u532e"+
    "\0\u5358\0\u5382\0\u53ac\0\u53d6\0\u5400\0\u542a\0\u5454\0\u547e"+
    "\0\u54a8\0\u54d2\0\u54fc\0\u5526\0\u5550\0\u557a\0\u55a4\0\u55ce"+
    "\0\u55f8\0\u5622\0\u564c\0\u5676\0\u56a0\0\u56ca\0\u56f4\0\u571e"+
    "\0\u5748\0\u5772\0\u579c\0\u57c6\0\u57f0\0\u581a\0\u5844\0\u586e"+
    "\0\u5898\0\u58c2\0\u58ec\0\u5916\0\u5940\0\u596a\0\u5994\0\u59be"+
    "\0\u59e8\0\u5a12\0\u5a3c\0\u5a66\0\u5a90\0\u5aba\0\u5ae4\0\u5b0e"+
    "\0\u5b38\0\u5b62\0\u5b8c\0\u5bb6\0\u5be0\0\u5c0a\0\u5c34\0\u5c5e"+
    "\0\u5c88\0\u5cb2\0\u5cdc\0\u5d06\0\u5d30\0\u5d5a\0\u5d84\0\u5dae"+
    "\0\u5dd8\0\u5e02\0\u5e2c\0\u5e56\0\u5e80\0\u5eaa\0\u5ed4\0\u5efe"+
    "\0\u5f28\0\u5f52\0\u5f7c\0\u5fa6\0\u5fd0\0\u5ffa\0\u6024\0\u604e"+
    "\0\u6078\0\u60a2\0\u60cc\0\u60f6\0\u6120\0\u614a\0\u6174\0\u619e"+
    "\0\u61c8\0\u61f2\0\u621c\0\u6246\0\u6270\0\u629a\0\u62c4\0\u62ee"+
    "\0\u6318\0\u6342\0\u636c\0\u6396\0\u63c0\0\u63ea\0\u6414\0\u643e"+
    "\0\u6468\0\u6492\0\u64bc\0\u64e6\0\u6510\0\u653a\0\u6564\0\u658e"+
    "\0\u65b8\0\u65e2\0\u660c\0\u6636\0\u6660\0\u668a\0\u66b4\0\u66de"+
    "\0\u6708\0\u6732\0\u675c\0\u6786\0\u67b0\0\u67da\0\u6804\0\u682e"+
    "\0\u6858\0\u6882\0\u68ac\0\u68d6\0\u6900\0\u692a\0\u6954\0\u697e"+
    "\0\u69a8\0\u69d2\0\u69fc\0\u6a26\0\u6a50\0\u6a7a\0\u6aa4\0\u6ace"+
    "\0\u6af8\0\u6b22\0\u6b4c\0\u6b76\0\u6ba0\0\u6bca\0\u6bf4\0\u6c1e"+
    "\0\u6c48\0\u6c72\0\u6c9c\0\u6cc6\0\u6cf0\0\u6d1a\0\u6d44\0\u6d6e"+
    "\0\u6d98\0\u6dc2\0\u6dec\0\u6e16\0\u6e40\0\u6e6a\0\u6e94\0\u6ebe"+
    "\0\u6ee8\0\u6f12\0\u6f3c\0\u6f66\0\u6f90\0\u6fba\0\u6fe4\0\u700e"+
    "\0\u7038\0\u7062\0\u708c\0\u70b6\0\u70e0\0\u710a\0\u7134\0\u715e"+
    "\0\u7188\0\u71b2\0\u71dc\0\u7206\0\u7230\0\u725a\0\u7284\0\u72ae"+
    "\0\u72d8\0\u7302\0\u732c\0\u7356\0\u7380\0\u73aa\0\u73d4\0\u73fe"+
    "\0\u7428\0\u7452\0\u747c\0\u74a6\0\u74d0\0\u74fa\0\u7524\0\u754e"+
    "\0\u7578\0\u75a2\0\u75cc\0\u75f6\0\u7620\0\u764a\0\u7674\0\u769e"+
    "\0\u76c8\0\u76f2\0\u771c\0\u7746\0\u7770\0\u779a\0\u77c4\0\u77ee"+
    "\0\u7818\0\u7842\0\u786c\0\u7896\0\u78c0\0\u78ea\0\u7914\0\u793e"+
    "\0\u7968\0\u7992\0\u79bc\0\u79e6\0\u7a10\0\u7a3a\0\u7a64\0\u7a8e"+
    "\0\u7ab8\0\u7ae2\0\u7b0c\0\u7b36\0\u7b60\0\u7b8a\0\u7bb4\0\u7bde"+
    "\0\u7c08\0\u7c32\0\u7c5c\0\u7c86\0\u7cb0\0\u7cda\0\u7d04\0\u7d2e"+
    "\0\u7d58\0\u7d82\0\u7dac\0\u7dd6\0\u7e00\0\u7e2a\0\u7e54\0\u7e7e"+
    "\0\u7ea8\0\u7ed2\0\u7efc\0\u7f26\0\u7f50\0\u7f7a\0\u7fa4\0\u7fce"+
    "\0\u7ff8\0\u8022\0\u804c\0\u8076\0\u80a0\0\u80ca\0\u80f4\0\u811e"+
    "\0\u8148\0\u8172\0\u819c\0\u81c6\0\u81f0\0\u821a\0\u8244\0\u826e"+
    "\0\u8298\0\u82c2\0\u82ec\0\u8316\0\u8340\0\u836a\0\u8394\0\u83be"+
    "\0\u83e8\0\u8412\0\u843c\0\u8466\0\u8490\0\u84ba\0\u84e4\0\u850e"+
    "\0\u8538\0\u8562\0\u858c\0\u85b6\0\u85e0\0\u860a\0\u8634\0\u865e"+
    "\0\u8688\0\u86b2\0\u86dc\0\u8706\0\u8730\0\u875a\0\u8784\0\u87ae"+
    "\0\u87d8\0\u8802\0\u882c\0\u8856\0\u8880\0\u88aa\0\u88d4\0\u88fe"+
    "\0\u8928\0\u8952\0\u897c\0\u89a6\0\u89d0\0\u89fa\0\u8a24\0\u8a4e"+
    "\0\u8a78\0\u8aa2\0\u8acc\0\u8af6\0\u8b20\0\u8b4a\0\u8b74\0\u8b9e"+
    "\0\u8bc8\0\u8bf2\0\u8c1c\0\u8c46\0\u8c70\0\u8c9a\0\u8cc4\0\u8cee"+
    "\0\u8d18\0\u8d42\0\u8d6c\0\u8d96\0\u8dc0\0\u8dea\0\u8e14\0\u8e3e"+
    "\0\u8e68\0\u8e92\0\u8ebc\0\u8ee6\0\u8f10\0\u8f3a\0\u8f64\0\u8f8e"+
    "\0\u8fb8\0\u8fe2\0\u900c\0\u9036\0\u9060\0\u908a\0\u90b4\0\u90de"+
    "\0\u9108\0\u9132\0\u915c\0\u9186\0\u91b0\0\u91da\0\u9204\0\u922e"+
    "\0\u9258\0\u9282\0\u92ac\0\u92d6\0\u9300\0\u932a\0\u9354\0\u937e"+
    "\0\u93a8\0\u93d2\0\u93fc\0\u9426\0\u9450\0\u947a\0\u94a4\0\u94ce"+
    "\0\u94f8\0\u9522\0\u954c\0\u9576\0\u95a0\0\u95ca\0\u95f4\0\u961e"+
    "\0\u9648\0\u9672\0\u969c\0\u96c6\0\u96f0\0\u971a\0\u9744\0\u976e"+
    "\0\u9798\0\u97c2\0\u97ec\0\u9816\0\u9840\0\u986a\0\u9894\0\u98be"+
    "\0\u98e8\0\u9912\0\u993c\0\u9966\0\u9990\0\u99ba\0\u99e4\0\u9a0e"+
    "\0\u9a38\0\u9a62\0\u9a8c\0\u9ab6\0\u9ae0\0\u9b0a\0\u9b34\0\u9b5e"+
    "\0\u9b88\0\u9bb2\0\u9bdc\0\u9c06\0\u9c30\0\u9c5a\0\u9c84\0\u9cae"+
    "\0\u9cd8\0\u9d02\0\u9d2c\0\u9d56\0\u9d80\0\u9daa\0\u9dd4\0\u9dfe"+
    "\0\u9e28\0\u9e52\0\u9e7c\0\u9ea6\0\u9ed0\0\u9efa\0\u9f24\0\u9f4e"+
    "\0\u9f78\0\u9fa2\0\u9fcc\0\u9ff6\0\ua020\0\ua04a\0\ua074\0\ua09e"+
    "\0\ua0c8\0\ua0f2\0\ua11c\0\ua146\0\ua170\0\ua19a\0\ua1c4\0\ua1ee"+
    "\0\ua218\0\ua242\0\ua26c\0\ua296\0\ua2c0\0\ua2ea\0\ua314\0\ua33e"+
    "\0\ua368\0\ua392\0\ua3bc\0\ua3e6\0\ua410\0\ua43a\0\ua464\0\ua48e"+
    "\0\ua4b8\0\ua4e2\0\ua50c\0\ua536\0\ua560\0\ua58a\0\ua5b4\0\ua5de"+
    "\0\ua608\0\ua632\0\ua65c\0\ua686\0\ua6b0\0\ua6da\0\ua704\0\ua72e"+
    "\0\ua758\0\ua782\0\ua7ac\0\ua7d6\0\ua800\0\ua82a\0\ua854\0\ua87e"+
    "\0\ua8a8\0\ua8d2\0\ua8fc\0\ua926\0\ua950\0\ua97a\0\ua9a4\0\ua9ce"+
    "\0\ua9f8\0\uaa22\0\uaa4c\0\uaa76\0\uaaa0\0\uaaca\0\uaaf4\0\uab1e"+
    "\0\uab48\0\uab72\0\uab9c\0\uabc6\0\uabf0\0\uac1a\0\uac44\0\uac6e"+
    "\0\uac98\0\uacc2\0\uacec\0\uad16\0\uad40\0\uad6a\0\uad94\0\52";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1096];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\5"+
    "\1\10\1\5\1\11\1\12\1\5\1\13\1\14\1\15"+
    "\1\16\1\17\3\5\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\5\1\36\1\37\1\3\1\40\1\41\55\0"+
    "\1\42\1\43\22\42\14\0\3\42\7\0\24\42\14\0"+
    "\3\42\7\0\1\42\1\44\22\42\14\0\3\42\7\0"+
    "\15\42\1\45\6\42\14\0\3\42\7\0\4\42\1\46"+
    "\17\42\14\0\3\42\7\0\15\42\1\47\3\42\1\50"+
    "\2\42\14\0\3\42\7\0\2\42\1\51\11\42\1\52"+
    "\7\42\14\0\3\42\7\0\2\42\1\53\5\42\1\54"+
    "\13\42\14\0\3\42\7\0\15\42\1\55\1\56\5\42"+
    "\14\0\3\42\7\0\2\42\1\57\21\42\14\0\3\42"+
    "\7\0\4\42\1\60\17\42\14\0\3\42\7\0\1\42"+
    "\1\61\16\42\1\62\3\42\14\0\3\42\7\0\20\42"+
    "\1\63\3\42\14\0\3\42\41\0\1\64\57\0\1\65"+
    "\43\0\1\66\1\0\1\67\47\0\1\70\46\0\1\71"+
    "\10\0\1\35\54\0\1\72\4\0\50\40\1\73\1\40"+
    "\2\0\24\74\14\0\3\74\7\0\2\74\1\75\21\74"+
    "\14\0\3\74\7\0\11\74\1\76\12\74\14\0\3\74"+
    "\7\0\1\74\1\77\22\74\14\0\3\74\7\0\11\74"+
    "\1\100\12\74\14\0\3\74\7\0\22\74\1\101\1\74"+
    "\14\0\3\74\7\0\6\74\1\102\15\74\14\0\3\74"+
    "\7\0\2\74\1\103\21\74\14\0\3\74\7\0\3\74"+
    "\1\104\20\74\14\0\3\74\7\0\17\74\1\105\4\74"+
    "\14\0\3\74\7\0\17\74\1\106\4\74\14\0\3\74"+
    "\7\0\21\74\1\107\2\74\14\0\3\74\7\0\12\74"+
    "\1\110\11\74\14\0\3\74\7\0\10\74\1\111\13\74"+
    "\14\0\3\74\7\0\14\74\1\112\7\74\14\0\3\74"+
    "\47\0\1\113\7\0\46\72\1\73\3\72\2\0\24\114"+
    "\14\0\3\114\7\0\3\114\1\115\3\114\1\116\14\114"+
    "\14\0\3\114\7\0\10\114\1\117\13\114\14\0\3\114"+
    "\7\0\21\114\1\120\2\114\14\0\3\114\7\0\14\114"+
    "\1\121\7\114\14\0\3\114\7\0\22\114\1\122\1\114"+
    "\14\0\3\114\7\0\10\114\1\123\13\114\14\0\3\114"+
    "\7\0\15\114\1\124\6\114\14\0\3\114\7\0\21\114"+
    "\1\125\2\114\14\0\3\114\7\0\24\126\14\0\3\126"+
    "\7\0\1\126\1\127\22\126\14\0\3\126\7\0\10\126"+
    "\1\130\13\126\14\0\3\126\7\0\10\126\1\131\13\126"+
    "\14\0\3\126\7\0\15\126\1\132\6\126\14\0\3\126"+
    "\7\0\10\126\1\133\13\126\14\0\3\126\7\0\10\126"+
    "\1\134\13\126\14\0\3\126\7\0\24\135\14\0\3\135"+
    "\7\0\4\135\1\136\17\135\14\0\3\135\7\0\11\135"+
    "\1\137\12\135\14\0\3\135\7\0\4\135\1\140\17\135"+
    "\14\0\3\135\7\0\24\141\14\0\3\141\7\0\5\141"+
    "\1\142\16\141\14\0\3\141\7\0\12\141\1\143\11\141"+
    "\14\0\3\141\7\0\15\141\1\144\6\141\14\0\3\141"+
    "\7\0\24\145\14\0\3\145\7\0\1\145\1\146\22\145"+
    "\14\0\3\145\7\0\24\147\14\0\3\147\7\0\10\147"+
    "\1\150\13\147\14\0\3\147\7\0\24\151\14\0\3\151"+
    "\7\0\24\152\14\0\3\152\7\0\24\153\14\0\3\153"+
    "\7\0\24\154\14\0\3\154\7\0\24\155\14\0\3\155"+
    "\7\0\24\156\14\0\3\156\7\0\24\157\14\0\3\157"+
    "\7\0\24\160\14\0\3\160\7\0\24\161\14\0\3\161"+
    "\7\0\24\162\14\0\3\162\7\0\24\163\14\0\3\163"+
    "\7\0\24\164\14\0\3\164\7\0\24\165\14\0\3\165"+
    "\7\0\24\166\14\0\3\166\7\0\24\167\14\0\3\167"+
    "\7\0\24\170\14\0\3\170\7\0\24\171\14\0\3\171"+
    "\7\0\24\172\14\0\3\172\7\0\24\173\14\0\3\173"+
    "\7\0\24\174\14\0\3\174\7\0\24\175\14\0\3\175"+
    "\7\0\24\176\14\0\3\176\7\0\24\177\14\0\3\177"+
    "\7\0\24\200\14\0\3\200\7\0\24\201\14\0\3\201"+
    "\7\0\24\202\14\0\3\202\7\0\24\203\14\0\3\203"+
    "\7\0\24\204\14\0\3\204\7\0\24\205\14\0\3\205"+
    "\7\0\24\206\14\0\3\206\7\0\24\207\14\0\3\207"+
    "\7\0\24\210\14\0\3\210\7\0\24\211\14\0\3\211"+
    "\7\0\24\212\14\0\3\212\7\0\24\213\14\0\3\213"+
    "\7\0\24\214\14\0\3\214\7\0\24\215\14\0\3\215"+
    "\7\0\24\216\14\0\3\216\7\0\24\217\14\0\3\217"+
    "\7\0\24\220\14\0\3\220\7\0\24\221\14\0\3\221"+
    "\7\0\24\222\14\0\3\222\7\0\24\223\14\0\3\223"+
    "\7\0\24\224\14\0\3\224\7\0\24\225\14\0\3\225"+
    "\7\0\24\226\14\0\3\226\7\0\24\227\14\0\3\227"+
    "\7\0\24\230\14\0\3\230\7\0\24\231\14\0\3\231"+
    "\7\0\24\232\14\0\3\232\7\0\24\233\14\0\3\233"+
    "\7\0\24\234\14\0\3\234\7\0\24\235\14\0\3\235"+
    "\7\0\24\236\14\0\3\236\7\0\24\237\14\0\3\237"+
    "\7\0\24\240\14\0\3\240\7\0\24\241\14\0\3\241"+
    "\7\0\24\242\14\0\3\242\7\0\24\243\14\0\3\243"+
    "\7\0\24\244\14\0\3\244\7\0\24\245\14\0\3\245"+
    "\7\0\24\246\14\0\3\246\7\0\24\247\14\0\3\247"+
    "\7\0\24\250\14\0\3\250\7\0\24\251\14\0\3\251"+
    "\7\0\24\252\14\0\3\252\7\0\24\253\14\0\3\253"+
    "\7\0\24\254\14\0\3\254\7\0\24\255\14\0\3\255"+
    "\7\0\24\256\14\0\3\256\7\0\24\257\14\0\3\257"+
    "\7\0\24\260\14\0\3\260\7\0\24\261\14\0\3\261"+
    "\7\0\24\262\14\0\3\262\7\0\24\263\14\0\3\263"+
    "\7\0\24\264\14\0\3\264\7\0\24\265\14\0\3\265"+
    "\7\0\24\266\14\0\3\266\7\0\24\267\14\0\3\267"+
    "\7\0\24\270\14\0\3\270\7\0\24\271\14\0\3\271"+
    "\7\0\24\272\14\0\3\272\7\0\24\273\14\0\3\273"+
    "\7\0\24\274\14\0\3\274\7\0\24\275\14\0\3\275"+
    "\7\0\24\276\14\0\3\276\7\0\24\277\14\0\3\277"+
    "\7\0\24\300\14\0\3\300\7\0\24\301\14\0\3\301"+
    "\7\0\24\302\14\0\3\302\7\0\24\303\14\0\3\303"+
    "\7\0\24\304\14\0\3\304\7\0\24\305\14\0\3\305"+
    "\7\0\24\306\14\0\3\306\7\0\24\307\14\0\3\307"+
    "\7\0\24\310\14\0\3\310\7\0\24\311\14\0\3\311"+
    "\7\0\24\312\14\0\3\312\7\0\24\313\14\0\3\313"+
    "\7\0\24\314\14\0\3\314\7\0\24\315\14\0\3\315"+
    "\7\0\24\316\14\0\3\316\7\0\24\317\14\0\3\317"+
    "\7\0\24\320\14\0\3\320\7\0\24\321\14\0\3\321"+
    "\7\0\24\322\14\0\3\322\7\0\24\323\14\0\3\323"+
    "\7\0\24\324\14\0\3\324\7\0\24\325\14\0\3\325"+
    "\7\0\24\326\14\0\3\326\7\0\24\327\14\0\3\327"+
    "\7\0\24\330\14\0\3\330\7\0\24\331\14\0\3\331"+
    "\7\0\24\332\14\0\3\332\7\0\24\333\14\0\3\333"+
    "\7\0\24\334\14\0\3\334\7\0\24\335\14\0\3\335"+
    "\7\0\24\336\14\0\3\336\7\0\24\337\14\0\3\337"+
    "\7\0\24\340\14\0\3\340\7\0\24\341\14\0\3\341"+
    "\7\0\24\342\14\0\3\342\7\0\24\343\14\0\3\343"+
    "\7\0\24\344\14\0\3\344\7\0\24\345\14\0\3\345"+
    "\7\0\24\346\14\0\3\346\7\0\24\347\14\0\3\347"+
    "\7\0\24\350\14\0\3\350\7\0\24\351\14\0\3\351"+
    "\7\0\24\352\14\0\3\352\7\0\24\353\14\0\3\353"+
    "\7\0\24\354\14\0\3\354\7\0\24\355\14\0\3\355"+
    "\7\0\24\356\14\0\3\356\7\0\24\357\14\0\3\357"+
    "\7\0\24\360\14\0\3\360\7\0\24\361\14\0\3\361"+
    "\7\0\24\362\14\0\3\362\7\0\24\363\14\0\3\363"+
    "\7\0\24\364\14\0\3\364\7\0\24\365\14\0\3\365"+
    "\7\0\24\366\14\0\3\366\7\0\24\367\14\0\3\367"+
    "\7\0\24\370\14\0\3\370\7\0\24\371\14\0\3\371"+
    "\7\0\24\372\14\0\3\372\7\0\24\373\14\0\3\373"+
    "\7\0\24\374\14\0\3\374\7\0\24\375\14\0\3\375"+
    "\7\0\24\376\14\0\3\376\7\0\24\377\14\0\3\377"+
    "\7\0\24\u0100\14\0\3\u0100\7\0\24\u0101\14\0\3\u0101"+
    "\7\0\24\u0102\14\0\3\u0102\7\0\24\u0103\14\0\3\u0103"+
    "\7\0\24\u0104\14\0\3\u0104\7\0\24\u0105\14\0\3\u0105"+
    "\7\0\24\u0106\14\0\3\u0106\7\0\24\u0107\14\0\3\u0107"+
    "\7\0\24\u0108\14\0\3\u0108\7\0\24\u0109\14\0\3\u0109"+
    "\7\0\24\u010a\14\0\3\u010a\7\0\24\u010b\14\0\3\u010b"+
    "\7\0\24\u010c\14\0\3\u010c\7\0\24\u010d\14\0\3\u010d"+
    "\7\0\24\u010e\14\0\3\u010e\7\0\24\u010f\14\0\3\u010f"+
    "\7\0\24\u0110\14\0\3\u0110\7\0\24\u0111\14\0\3\u0111"+
    "\7\0\24\u0112\14\0\3\u0112\7\0\24\u0113\14\0\3\u0113"+
    "\7\0\24\u0114\14\0\3\u0114\7\0\24\u0115\14\0\3\u0115"+
    "\7\0\24\u0116\14\0\3\u0116\7\0\24\u0117\14\0\3\u0117"+
    "\7\0\24\u0118\14\0\3\u0118\7\0\24\u0119\14\0\3\u0119"+
    "\7\0\24\u011a\14\0\3\u011a\7\0\24\u011b\14\0\3\u011b"+
    "\7\0\24\u011c\14\0\3\u011c\7\0\24\u011d\14\0\3\u011d"+
    "\7\0\24\u011e\14\0\3\u011e\7\0\24\u011f\14\0\3\u011f"+
    "\7\0\24\u0120\14\0\3\u0120\7\0\24\u0121\14\0\3\u0121"+
    "\7\0\24\u0122\14\0\3\u0122\7\0\24\u0123\14\0\3\u0123"+
    "\7\0\24\u0124\14\0\3\u0124\7\0\24\u0125\14\0\3\u0125"+
    "\7\0\24\u0126\14\0\3\u0126\7\0\24\u0127\14\0\3\u0127"+
    "\7\0\24\u0128\14\0\3\u0128\7\0\24\u0129\14\0\3\u0129"+
    "\7\0\24\u012a\14\0\3\u012a\7\0\24\u012b\14\0\3\u012b"+
    "\7\0\24\u012c\14\0\3\u012c\7\0\24\u012d\14\0\3\u012d"+
    "\7\0\24\u012e\14\0\3\u012e\7\0\24\u012f\14\0\3\u012f"+
    "\7\0\24\u0130\14\0\3\u0130\7\0\24\u0131\14\0\3\u0131"+
    "\7\0\24\u0132\14\0\3\u0132\7\0\24\u0133\14\0\3\u0133"+
    "\7\0\24\u0134\14\0\3\u0134\7\0\24\u0135\14\0\3\u0135"+
    "\7\0\24\u0136\14\0\3\u0136\7\0\24\u0137\14\0\3\u0137"+
    "\7\0\24\u0138\14\0\3\u0138\7\0\24\u0139\14\0\3\u0139"+
    "\7\0\24\u013a\14\0\3\u013a\7\0\24\u013b\14\0\3\u013b"+
    "\7\0\24\u013c\14\0\3\u013c\7\0\24\u013d\14\0\3\u013d"+
    "\7\0\24\u013e\14\0\3\u013e\7\0\24\u013f\14\0\3\u013f"+
    "\7\0\24\u0140\14\0\3\u0140\7\0\24\u0141\14\0\3\u0141"+
    "\7\0\24\u0142\14\0\3\u0142\7\0\24\u0143\14\0\3\u0143"+
    "\7\0\24\u0144\14\0\3\u0144\7\0\24\u0145\14\0\3\u0145"+
    "\7\0\24\u0146\14\0\3\u0146\7\0\24\u0147\14\0\3\u0147"+
    "\7\0\24\u0148\14\0\3\u0148\7\0\24\u0149\14\0\3\u0149"+
    "\7\0\24\u014a\14\0\3\u014a\7\0\24\u014b\14\0\3\u014b"+
    "\7\0\24\u014c\14\0\3\u014c\7\0\24\u014d\14\0\3\u014d"+
    "\7\0\24\u014e\14\0\3\u014e\7\0\24\u014f\14\0\3\u014f"+
    "\7\0\24\u0150\14\0\3\u0150\7\0\24\u0151\14\0\3\u0151"+
    "\7\0\24\u0152\14\0\3\u0152\7\0\24\u0153\14\0\3\u0153"+
    "\7\0\24\u0154\14\0\3\u0154\7\0\24\u0155\14\0\3\u0155"+
    "\7\0\24\u0156\14\0\3\u0156\7\0\24\u0157\14\0\3\u0157"+
    "\7\0\24\u0158\14\0\3\u0158\7\0\24\u0159\14\0\3\u0159"+
    "\7\0\24\u015a\14\0\3\u015a\7\0\24\u015b\14\0\3\u015b"+
    "\7\0\24\u015c\14\0\3\u015c\7\0\24\u015d\14\0\3\u015d"+
    "\7\0\24\u015e\14\0\3\u015e\7\0\24\u015f\14\0\3\u015f"+
    "\7\0\24\u0160\14\0\3\u0160\7\0\24\u0161\14\0\3\u0161"+
    "\7\0\24\u0162\14\0\3\u0162\7\0\24\u0163\14\0\3\u0163"+
    "\7\0\24\u0164\14\0\3\u0164\7\0\24\u0165\14\0\3\u0165"+
    "\7\0\24\u0166\14\0\3\u0166\7\0\24\u0167\14\0\3\u0167"+
    "\7\0\24\u0168\14\0\3\u0168\7\0\24\u0169\14\0\3\u0169"+
    "\7\0\24\u016a\14\0\3\u016a\7\0\24\u016b\14\0\3\u016b"+
    "\7\0\24\u016c\14\0\3\u016c\7\0\24\u016d\14\0\3\u016d"+
    "\7\0\24\u016e\14\0\3\u016e\7\0\24\u016f\14\0\3\u016f"+
    "\7\0\24\u0170\14\0\3\u0170\7\0\24\u0171\14\0\3\u0171"+
    "\7\0\24\u0172\14\0\3\u0172\7\0\24\u0173\14\0\3\u0173"+
    "\7\0\24\u0174\14\0\3\u0174\7\0\24\u0175\14\0\3\u0175"+
    "\7\0\24\u0176\14\0\3\u0176\7\0\24\u0177\14\0\3\u0177"+
    "\7\0\24\u0178\14\0\3\u0178\7\0\24\u0179\14\0\3\u0179"+
    "\7\0\24\u017a\14\0\3\u017a\7\0\24\u017b\14\0\3\u017b"+
    "\7\0\24\u017c\14\0\3\u017c\7\0\24\u017d\14\0\3\u017d"+
    "\7\0\24\u017e\14\0\3\u017e\7\0\24\u017f\14\0\3\u017f"+
    "\7\0\24\u0180\14\0\3\u0180\7\0\24\u0181\14\0\3\u0181"+
    "\7\0\24\u0182\14\0\3\u0182\7\0\24\u0183\14\0\3\u0183"+
    "\7\0\24\u0184\14\0\3\u0184\7\0\24\u0185\14\0\3\u0185"+
    "\7\0\24\u0186\14\0\3\u0186\7\0\24\u0187\14\0\3\u0187"+
    "\7\0\24\u0188\14\0\3\u0188\7\0\24\u0189\14\0\3\u0189"+
    "\7\0\24\u018a\14\0\3\u018a\7\0\24\u018b\14\0\3\u018b"+
    "\7\0\24\u018c\14\0\3\u018c\7\0\24\u018d\14\0\3\u018d"+
    "\7\0\24\u018e\14\0\3\u018e\7\0\24\u018f\14\0\3\u018f"+
    "\7\0\24\u0190\14\0\3\u0190\7\0\24\u0191\14\0\3\u0191"+
    "\7\0\24\u0192\14\0\3\u0192\7\0\24\u0193\14\0\3\u0193"+
    "\7\0\24\u0194\14\0\3\u0194\7\0\24\u0195\14\0\3\u0195"+
    "\7\0\24\u0196\14\0\3\u0196\7\0\24\u0197\14\0\3\u0197"+
    "\7\0\24\u0198\14\0\3\u0198\7\0\24\u0199\14\0\3\u0199"+
    "\7\0\24\u019a\14\0\3\u019a\7\0\24\u019b\14\0\3\u019b"+
    "\7\0\24\u019c\14\0\3\u019c\7\0\24\u019d\14\0\3\u019d"+
    "\7\0\24\u019e\14\0\3\u019e\7\0\24\u019f\14\0\3\u019f"+
    "\7\0\24\u01a0\14\0\3\u01a0\7\0\24\u01a1\14\0\3\u01a1"+
    "\7\0\24\u01a2\14\0\3\u01a2\7\0\24\u01a3\14\0\3\u01a3"+
    "\7\0\24\u01a4\14\0\3\u01a4\7\0\24\u01a5\14\0\3\u01a5"+
    "\7\0\24\u01a6\14\0\3\u01a6\7\0\24\u01a7\14\0\3\u01a7"+
    "\7\0\24\u01a8\14\0\3\u01a8\7\0\24\u01a9\14\0\3\u01a9"+
    "\7\0\24\u01aa\14\0\3\u01aa\7\0\24\u01ab\14\0\3\u01ab"+
    "\7\0\24\u01ac\14\0\3\u01ac\7\0\24\u01ad\14\0\3\u01ad"+
    "\7\0\24\u01ae\14\0\3\u01ae\7\0\24\u01af\14\0\3\u01af"+
    "\7\0\24\u01b0\14\0\3\u01b0\7\0\24\u01b1\14\0\3\u01b1"+
    "\7\0\24\u01b2\14\0\3\u01b2\7\0\24\u01b3\14\0\3\u01b3"+
    "\7\0\24\u01b4\14\0\3\u01b4\7\0\24\u01b5\14\0\3\u01b5"+
    "\7\0\24\u01b6\14\0\3\u01b6\7\0\24\u01b7\14\0\3\u01b7"+
    "\7\0\24\u01b8\14\0\3\u01b8\7\0\24\u01b9\14\0\3\u01b9"+
    "\7\0\24\u01ba\14\0\3\u01ba\7\0\24\u01bb\14\0\3\u01bb"+
    "\7\0\24\u01bc\14\0\3\u01bc\7\0\24\u01bd\14\0\3\u01bd"+
    "\7\0\24\u01be\14\0\3\u01be\7\0\24\u01bf\14\0\3\u01bf"+
    "\7\0\24\u01c0\14\0\3\u01c0\7\0\24\u01c1\14\0\3\u01c1"+
    "\7\0\24\u01c2\14\0\3\u01c2\7\0\24\u01c3\14\0\3\u01c3"+
    "\7\0\24\u01c4\14\0\3\u01c4\7\0\24\u01c5\14\0\3\u01c5"+
    "\7\0\24\u01c6\14\0\3\u01c6\7\0\24\u01c7\14\0\3\u01c7"+
    "\7\0\24\u01c8\14\0\3\u01c8\7\0\24\u01c9\14\0\3\u01c9"+
    "\7\0\24\u01ca\14\0\3\u01ca\7\0\24\u01cb\14\0\3\u01cb"+
    "\7\0\24\u01cc\14\0\3\u01cc\7\0\24\u01cd\14\0\3\u01cd"+
    "\7\0\24\u01ce\14\0\3\u01ce\7\0\24\u01cf\14\0\3\u01cf"+
    "\7\0\24\u01d0\14\0\3\u01d0\7\0\24\u01d1\14\0\3\u01d1"+
    "\7\0\24\u01d2\14\0\3\u01d2\7\0\24\u01d3\14\0\3\u01d3"+
    "\7\0\24\u01d4\14\0\3\u01d4\7\0\24\u01d5\14\0\3\u01d5"+
    "\7\0\24\u01d6\14\0\3\u01d6\7\0\24\u01d7\14\0\3\u01d7"+
    "\7\0\24\u01d8\14\0\3\u01d8\7\0\24\u01d9\14\0\3\u01d9"+
    "\7\0\24\u01da\14\0\3\u01da\7\0\24\u01db\14\0\3\u01db"+
    "\7\0\24\u01dc\14\0\3\u01dc\7\0\24\u01dd\14\0\3\u01dd"+
    "\7\0\24\u01de\14\0\3\u01de\7\0\24\u01df\14\0\3\u01df"+
    "\7\0\24\u01e0\14\0\3\u01e0\7\0\24\u01e1\14\0\3\u01e1"+
    "\7\0\24\u01e2\14\0\3\u01e2\7\0\24\u01e3\14\0\3\u01e3"+
    "\7\0\24\u01e4\14\0\3\u01e4\7\0\24\u01e5\14\0\3\u01e5"+
    "\7\0\24\u01e6\14\0\3\u01e6\7\0\24\u01e7\14\0\3\u01e7"+
    "\7\0\24\u01e8\14\0\3\u01e8\7\0\24\u01e9\14\0\3\u01e9"+
    "\7\0\24\u01ea\14\0\3\u01ea\7\0\24\u01eb\14\0\3\u01eb"+
    "\7\0\24\u01ec\14\0\3\u01ec\7\0\24\u01ed\14\0\3\u01ed"+
    "\7\0\24\u01ee\14\0\3\u01ee\7\0\24\u01ef\14\0\3\u01ef"+
    "\7\0\24\u01f0\14\0\3\u01f0\7\0\24\u01f1\14\0\3\u01f1"+
    "\7\0\24\u01f2\14\0\3\u01f2\7\0\24\u01f3\14\0\3\u01f3"+
    "\7\0\24\u01f4\14\0\3\u01f4\7\0\24\u01f5\14\0\3\u01f5"+
    "\7\0\24\u01f6\14\0\3\u01f6\7\0\24\u01f7\14\0\3\u01f7"+
    "\7\0\24\u01f8\14\0\3\u01f8\7\0\24\u01f9\14\0\3\u01f9"+
    "\7\0\24\u01fa\14\0\3\u01fa\7\0\24\u01fb\14\0\3\u01fb"+
    "\7\0\24\u01fc\14\0\3\u01fc\7\0\24\u01fd\14\0\3\u01fd"+
    "\7\0\24\u01fe\14\0\3\u01fe\7\0\24\u01ff\14\0\3\u01ff"+
    "\7\0\24\u0200\14\0\3\u0200\7\0\24\u0201\14\0\3\u0201"+
    "\7\0\24\u0202\14\0\3\u0202\7\0\24\u0203\14\0\3\u0203"+
    "\7\0\24\u0204\14\0\3\u0204\7\0\24\u0205\14\0\3\u0205"+
    "\7\0\24\u0206\14\0\3\u0206\7\0\24\u0207\14\0\3\u0207"+
    "\7\0\24\u0208\14\0\3\u0208\7\0\24\u0209\14\0\3\u0209"+
    "\7\0\24\u020a\14\0\3\u020a\7\0\24\u020b\14\0\3\u020b"+
    "\7\0\24\u020c\14\0\3\u020c\7\0\24\u020d\14\0\3\u020d"+
    "\7\0\24\u020e\14\0\3\u020e\7\0\24\u020f\14\0\3\u020f"+
    "\7\0\24\u0210\14\0\3\u0210\7\0\24\u0211\14\0\3\u0211"+
    "\7\0\24\u0212\14\0\3\u0212\7\0\24\u0213\14\0\3\u0213"+
    "\7\0\24\u0214\14\0\3\u0214\7\0\24\u0215\14\0\3\u0215"+
    "\7\0\24\u0216\14\0\3\u0216\7\0\24\u0217\14\0\3\u0217"+
    "\7\0\24\u0218\14\0\3\u0218\7\0\24\u0219\14\0\3\u0219"+
    "\7\0\24\u021a\14\0\3\u021a\7\0\24\u021b\14\0\3\u021b"+
    "\7\0\24\u021c\14\0\3\u021c\7\0\24\u021d\14\0\3\u021d"+
    "\7\0\24\u021e\14\0\3\u021e\7\0\24\u021f\14\0\3\u021f"+
    "\7\0\24\u0220\14\0\3\u0220\7\0\24\u0221\14\0\3\u0221"+
    "\7\0\24\u0222\14\0\3\u0222\7\0\24\u0223\14\0\3\u0223"+
    "\7\0\24\u0224\14\0\3\u0224\7\0\24\u0225\14\0\3\u0225"+
    "\7\0\24\u0226\14\0\3\u0226\7\0\24\u0227\14\0\3\u0227"+
    "\7\0\24\u0228\14\0\3\u0228\7\0\24\u0229\14\0\3\u0229"+
    "\7\0\24\u022a\14\0\3\u022a\7\0\24\u022b\14\0\3\u022b"+
    "\7\0\24\u022c\14\0\3\u022c\7\0\24\u022d\14\0\3\u022d"+
    "\7\0\24\u022e\14\0\3\u022e\7\0\24\u022f\14\0\3\u022f"+
    "\7\0\24\u0230\14\0\3\u0230\7\0\24\u0231\14\0\3\u0231"+
    "\7\0\24\u0232\14\0\3\u0232\7\0\24\u0233\14\0\3\u0233"+
    "\7\0\24\u0234\14\0\3\u0234\7\0\24\u0235\14\0\3\u0235"+
    "\7\0\24\u0236\14\0\3\u0236\7\0\24\u0237\14\0\3\u0237"+
    "\7\0\24\u0238\14\0\3\u0238\7\0\24\u0239\14\0\3\u0239"+
    "\7\0\24\u023a\14\0\3\u023a\7\0\24\u023b\14\0\3\u023b"+
    "\7\0\24\u023c\14\0\3\u023c\7\0\24\u023d\14\0\3\u023d"+
    "\7\0\24\u023e\14\0\3\u023e\7\0\24\u023f\14\0\3\u023f"+
    "\7\0\24\u0240\14\0\3\u0240\7\0\24\u0241\14\0\3\u0241"+
    "\7\0\24\u0242\14\0\3\u0242\7\0\24\u0243\14\0\3\u0243"+
    "\7\0\24\u0244\14\0\3\u0244\7\0\24\u0245\14\0\3\u0245"+
    "\7\0\24\u0246\14\0\3\u0246\7\0\24\u0247\14\0\3\u0247"+
    "\7\0\24\u0248\14\0\3\u0248\7\0\24\u0249\14\0\3\u0249"+
    "\7\0\24\u024a\14\0\3\u024a\7\0\24\u024b\14\0\3\u024b"+
    "\7\0\24\u024c\14\0\3\u024c\7\0\24\u024d\14\0\3\u024d"+
    "\7\0\24\u024e\14\0\3\u024e\7\0\24\u024f\14\0\3\u024f"+
    "\7\0\24\u0250\14\0\3\u0250\7\0\24\u0251\14\0\3\u0251"+
    "\7\0\24\u0252\14\0\3\u0252\7\0\24\u0253\14\0\3\u0253"+
    "\7\0\24\u0254\14\0\3\u0254\7\0\24\u0255\14\0\3\u0255"+
    "\7\0\24\u0256\14\0\3\u0256\7\0\24\u0257\14\0\3\u0257"+
    "\7\0\24\u0258\14\0\3\u0258\7\0\24\u0259\14\0\3\u0259"+
    "\7\0\24\u025a\14\0\3\u025a\7\0\24\u025b\14\0\3\u025b"+
    "\7\0\24\u025c\14\0\3\u025c\7\0\24\u025d\14\0\3\u025d"+
    "\7\0\24\u025e\14\0\3\u025e\7\0\24\u025f\14\0\3\u025f"+
    "\7\0\24\u0260\14\0\3\u0260\7\0\24\u0261\14\0\3\u0261"+
    "\7\0\24\u0262\14\0\3\u0262\7\0\24\u0263\14\0\3\u0263"+
    "\7\0\24\u0264\14\0\3\u0264\7\0\24\u0265\14\0\3\u0265"+
    "\7\0\24\u0266\14\0\3\u0266\7\0\24\u0267\14\0\3\u0267"+
    "\7\0\24\u0268\14\0\3\u0268\7\0\24\u0269\14\0\3\u0269"+
    "\7\0\24\u026a\14\0\3\u026a\7\0\24\u026b\14\0\3\u026b"+
    "\7\0\24\u026c\14\0\3\u026c\7\0\24\u026d\14\0\3\u026d"+
    "\7\0\24\u026e\14\0\3\u026e\7\0\24\u026f\14\0\3\u026f"+
    "\7\0\24\u0270\14\0\3\u0270\7\0\24\u0271\14\0\3\u0271"+
    "\7\0\24\u0272\14\0\3\u0272\7\0\24\u0273\14\0\3\u0273"+
    "\7\0\24\u0274\14\0\3\u0274\7\0\24\u0275\14\0\3\u0275"+
    "\7\0\24\u0276\14\0\3\u0276\7\0\24\u0277\14\0\3\u0277"+
    "\7\0\24\u0278\14\0\3\u0278\7\0\24\u0279\14\0\3\u0279"+
    "\7\0\24\u027a\14\0\3\u027a\7\0\24\u027b\14\0\3\u027b"+
    "\7\0\24\u027c\14\0\3\u027c\7\0\24\u027d\14\0\3\u027d"+
    "\7\0\24\u027e\14\0\3\u027e\7\0\24\u027f\14\0\3\u027f"+
    "\7\0\24\u0280\14\0\3\u0280\7\0\24\u0281\14\0\3\u0281"+
    "\7\0\24\u0282\14\0\3\u0282\7\0\24\u0283\14\0\3\u0283"+
    "\7\0\24\u0284\14\0\3\u0284\7\0\24\u0285\14\0\3\u0285"+
    "\7\0\24\u0286\14\0\3\u0286\7\0\24\u0287\14\0\3\u0287"+
    "\7\0\24\u0288\14\0\3\u0288\7\0\24\u0289\14\0\3\u0289"+
    "\7\0\24\u028a\14\0\3\u028a\7\0\24\u028b\14\0\3\u028b"+
    "\7\0\24\u028c\14\0\3\u028c\7\0\24\u028d\14\0\3\u028d"+
    "\7\0\24\u028e\14\0\3\u028e\7\0\24\u028f\14\0\3\u028f"+
    "\7\0\24\u0290\14\0\3\u0290\7\0\24\u0291\14\0\3\u0291"+
    "\7\0\24\u0292\14\0\3\u0292\7\0\24\u0293\14\0\3\u0293"+
    "\7\0\24\u0294\14\0\3\u0294\7\0\24\u0295\14\0\3\u0295"+
    "\7\0\24\u0296\14\0\3\u0296\7\0\24\u0297\14\0\3\u0297"+
    "\7\0\24\u0298\14\0\3\u0298\7\0\24\u0299\14\0\3\u0299"+
    "\7\0\24\u029a\14\0\3\u029a\7\0\24\u029b\14\0\3\u029b"+
    "\7\0\24\u029c\14\0\3\u029c\7\0\24\u029d\14\0\3\u029d"+
    "\7\0\24\u029e\14\0\3\u029e\7\0\24\u029f\14\0\3\u029f"+
    "\7\0\24\u02a0\14\0\3\u02a0\7\0\24\u02a1\14\0\3\u02a1"+
    "\7\0\24\u02a2\14\0\3\u02a2\7\0\24\u02a3\14\0\3\u02a3"+
    "\7\0\24\u02a4\14\0\3\u02a4\7\0\24\u02a5\14\0\3\u02a5"+
    "\7\0\24\u02a6\14\0\3\u02a6\7\0\24\u02a7\14\0\3\u02a7"+
    "\7\0\24\u02a8\14\0\3\u02a8\7\0\24\u02a9\14\0\3\u02a9"+
    "\7\0\24\u02aa\14\0\3\u02aa\7\0\24\u02ab\14\0\3\u02ab"+
    "\7\0\24\u02ac\14\0\3\u02ac\7\0\24\u02ad\14\0\3\u02ad"+
    "\7\0\24\u02ae\14\0\3\u02ae\7\0\24\u02af\14\0\3\u02af"+
    "\7\0\24\u02b0\14\0\3\u02b0\7\0\24\u02b1\14\0\3\u02b1"+
    "\7\0\24\u02b2\14\0\3\u02b2\7\0\24\u02b3\14\0\3\u02b3"+
    "\7\0\24\u02b4\14\0\3\u02b4\7\0\24\u02b5\14\0\3\u02b5"+
    "\7\0\24\u02b6\14\0\3\u02b6\7\0\24\u02b7\14\0\3\u02b7"+
    "\7\0\24\u02b8\14\0\3\u02b8\7\0\24\u02b9\14\0\3\u02b9"+
    "\7\0\24\u02ba\14\0\3\u02ba\7\0\24\u02bb\14\0\3\u02bb"+
    "\7\0\24\u02bc\14\0\3\u02bc\7\0\24\u02bd\14\0\3\u02bd"+
    "\7\0\24\u02be\14\0\3\u02be\7\0\24\u02bf\14\0\3\u02bf"+
    "\7\0\24\u02c0\14\0\3\u02c0\7\0\24\u02c1\14\0\3\u02c1"+
    "\7\0\24\u02c2\14\0\3\u02c2\7\0\24\u02c3\14\0\3\u02c3"+
    "\7\0\24\u02c4\14\0\3\u02c4\7\0\24\u02c5\14\0\3\u02c5"+
    "\7\0\24\u02c6\14\0\3\u02c6\7\0\24\u02c7\14\0\3\u02c7"+
    "\7\0\24\u02c8\14\0\3\u02c8\7\0\24\u02c9\14\0\3\u02c9"+
    "\7\0\24\u02ca\14\0\3\u02ca\7\0\24\u02cb\14\0\3\u02cb"+
    "\7\0\24\u02cc\14\0\3\u02cc\7\0\24\u02cd\14\0\3\u02cd"+
    "\7\0\24\u02ce\14\0\3\u02ce\7\0\24\u02cf\14\0\3\u02cf"+
    "\7\0\24\u02d0\14\0\3\u02d0\7\0\24\u02d1\14\0\3\u02d1"+
    "\7\0\24\u02d2\14\0\3\u02d2\7\0\24\u02d3\14\0\3\u02d3"+
    "\7\0\24\u02d4\14\0\3\u02d4\7\0\24\u02d5\14\0\3\u02d5"+
    "\7\0\24\u02d6\14\0\3\u02d6\7\0\24\u02d7\14\0\3\u02d7"+
    "\7\0\24\u02d8\14\0\3\u02d8\7\0\24\u02d9\14\0\3\u02d9"+
    "\7\0\24\u02da\14\0\3\u02da\7\0\24\u02db\14\0\3\u02db"+
    "\7\0\24\u02dc\14\0\3\u02dc\7\0\24\u02dd\14\0\3\u02dd"+
    "\7\0\24\u02de\14\0\3\u02de\7\0\24\u02df\14\0\3\u02df"+
    "\7\0\24\u02e0\14\0\3\u02e0\7\0\24\u02e1\14\0\3\u02e1"+
    "\7\0\24\u02e2\14\0\3\u02e2\7\0\24\u02e3\14\0\3\u02e3"+
    "\7\0\24\u02e4\14\0\3\u02e4\7\0\24\u02e5\14\0\3\u02e5"+
    "\7\0\24\u02e6\14\0\3\u02e6\7\0\24\u02e7\14\0\3\u02e7"+
    "\7\0\24\u02e8\14\0\3\u02e8\7\0\24\u02e9\14\0\3\u02e9"+
    "\7\0\24\u02ea\14\0\3\u02ea\7\0\24\u02eb\14\0\3\u02eb"+
    "\7\0\24\u02ec\14\0\3\u02ec\7\0\24\u02ed\14\0\3\u02ed"+
    "\7\0\24\u02ee\14\0\3\u02ee\7\0\24\u02ef\14\0\3\u02ef"+
    "\7\0\24\u02f0\14\0\3\u02f0\7\0\24\u02f1\14\0\3\u02f1"+
    "\7\0\24\u02f2\14\0\3\u02f2\7\0\24\u02f3\14\0\3\u02f3"+
    "\7\0\24\u02f4\14\0\3\u02f4\7\0\24\u02f5\14\0\3\u02f5"+
    "\7\0\24\u02f6\14\0\3\u02f6\7\0\24\u02f7\14\0\3\u02f7"+
    "\7\0\24\u02f8\14\0\3\u02f8\7\0\24\u02f9\14\0\3\u02f9"+
    "\7\0\24\u02fa\14\0\3\u02fa\7\0\24\u02fb\14\0\3\u02fb"+
    "\7\0\24\u02fc\14\0\3\u02fc\7\0\24\u02fd\14\0\3\u02fd"+
    "\7\0\24\u02fe\14\0\3\u02fe\7\0\24\u02ff\14\0\3\u02ff"+
    "\7\0\24\u0300\14\0\3\u0300\7\0\24\u0301\14\0\3\u0301"+
    "\7\0\24\u0302\14\0\3\u0302\7\0\24\u0303\14\0\3\u0303"+
    "\7\0\24\u0304\14\0\3\u0304\7\0\24\u0305\14\0\3\u0305"+
    "\7\0\24\u0306\14\0\3\u0306\7\0\24\u0307\14\0\3\u0307"+
    "\7\0\24\u0308\14\0\3\u0308\7\0\24\u0309\14\0\3\u0309"+
    "\7\0\24\u030a\14\0\3\u030a\7\0\24\u030b\14\0\3\u030b"+
    "\7\0\24\u030c\14\0\3\u030c\7\0\24\u030d\14\0\3\u030d"+
    "\7\0\24\u030e\14\0\3\u030e\7\0\24\u030f\14\0\3\u030f"+
    "\7\0\24\u0310\14\0\3\u0310\7\0\24\u0311\14\0\3\u0311"+
    "\7\0\24\u0312\14\0\3\u0312\7\0\24\u0313\14\0\3\u0313"+
    "\7\0\24\u0314\14\0\3\u0314\7\0\24\u0315\14\0\3\u0315"+
    "\7\0\24\u0316\14\0\3\u0316\7\0\24\u0317\14\0\3\u0317"+
    "\7\0\24\u0318\14\0\3\u0318\7\0\24\u0319\14\0\3\u0319"+
    "\7\0\24\u031a\14\0\3\u031a\7\0\24\u031b\14\0\3\u031b"+
    "\7\0\24\u031c\14\0\3\u031c\7\0\24\u031d\14\0\3\u031d"+
    "\7\0\24\u031e\14\0\3\u031e\7\0\24\u031f\14\0\3\u031f"+
    "\7\0\24\u0320\14\0\3\u0320\7\0\24\u0321\14\0\3\u0321"+
    "\7\0\24\u0322\14\0\3\u0322\7\0\24\u0323\14\0\3\u0323"+
    "\7\0\24\u0324\14\0\3\u0324\7\0\24\u0325\14\0\3\u0325"+
    "\7\0\24\u0326\14\0\3\u0326\7\0\24\u0327\14\0\3\u0327"+
    "\7\0\24\u0328\14\0\3\u0328\7\0\24\u0329\14\0\3\u0329"+
    "\7\0\24\u032a\14\0\3\u032a\7\0\24\u032b\14\0\3\u032b"+
    "\7\0\24\u032c\14\0\3\u032c\7\0\24\u032d\14\0\3\u032d"+
    "\7\0\24\u032e\14\0\3\u032e\7\0\24\u032f\14\0\3\u032f"+
    "\7\0\24\u0330\14\0\3\u0330\7\0\24\u0331\14\0\3\u0331"+
    "\7\0\24\u0332\14\0\3\u0332\7\0\24\u0333\14\0\3\u0333"+
    "\7\0\24\u0334\14\0\3\u0334\7\0\24\u0335\14\0\3\u0335"+
    "\7\0\24\u0336\14\0\3\u0336\7\0\24\u0337\14\0\3\u0337"+
    "\7\0\24\u0338\14\0\3\u0338\7\0\24\u0339\14\0\3\u0339"+
    "\7\0\24\u033a\14\0\3\u033a\7\0\24\u033b\14\0\3\u033b"+
    "\7\0\24\u033c\14\0\3\u033c\7\0\24\u033d\14\0\3\u033d"+
    "\7\0\24\u033e\14\0\3\u033e\7\0\24\u033f\14\0\3\u033f"+
    "\7\0\24\u0340\14\0\3\u0340\7\0\24\u0341\14\0\3\u0341"+
    "\7\0\24\u0342\14\0\3\u0342\7\0\24\u0343\14\0\3\u0343"+
    "\7\0\24\u0344\14\0\3\u0344\7\0\24\u0345\14\0\3\u0345"+
    "\7\0\24\u0346\14\0\3\u0346\7\0\24\u0347\14\0\3\u0347"+
    "\7\0\24\u0348\14\0\3\u0348\7\0\24\u0349\14\0\3\u0349"+
    "\7\0\24\u034a\14\0\3\u034a\7\0\24\u034b\14\0\3\u034b"+
    "\7\0\24\u034c\14\0\3\u034c\7\0\24\u034d\14\0\3\u034d"+
    "\7\0\24\u034e\14\0\3\u034e\7\0\24\u034f\14\0\3\u034f"+
    "\7\0\24\u0350\14\0\3\u0350\7\0\24\u0351\14\0\3\u0351"+
    "\7\0\24\u0352\14\0\3\u0352\7\0\24\u0353\14\0\3\u0353"+
    "\7\0\24\u0354\14\0\3\u0354\7\0\24\u0355\14\0\3\u0355"+
    "\7\0\24\u0356\14\0\3\u0356\7\0\24\u0357\14\0\3\u0357"+
    "\7\0\24\u0358\14\0\3\u0358\7\0\24\u0359\14\0\3\u0359"+
    "\7\0\24\u035a\14\0\3\u035a\7\0\24\u035b\14\0\3\u035b"+
    "\7\0\24\u035c\14\0\3\u035c\7\0\24\u035d\14\0\3\u035d"+
    "\7\0\24\u035e\14\0\3\u035e\7\0\24\u035f\14\0\3\u035f"+
    "\7\0\24\u0360\14\0\3\u0360\7\0\24\u0361\14\0\3\u0361"+
    "\7\0\24\u0362\14\0\3\u0362\7\0\24\u0363\14\0\3\u0363"+
    "\7\0\24\u0364\14\0\3\u0364\7\0\24\u0365\14\0\3\u0365"+
    "\7\0\24\u0366\14\0\3\u0366\7\0\24\u0367\14\0\3\u0367"+
    "\7\0\24\u0368\14\0\3\u0368\7\0\24\u0369\14\0\3\u0369"+
    "\7\0\24\u036a\14\0\3\u036a\7\0\24\u036b\14\0\3\u036b"+
    "\7\0\24\u036c\14\0\3\u036c\7\0\24\u036d\14\0\3\u036d"+
    "\7\0\24\u036e\14\0\3\u036e\7\0\24\u036f\14\0\3\u036f"+
    "\7\0\24\u0370\14\0\3\u0370\7\0\24\u0371\14\0\3\u0371"+
    "\7\0\24\u0372\14\0\3\u0372\7\0\24\u0373\14\0\3\u0373"+
    "\7\0\24\u0374\14\0\3\u0374\7\0\24\u0375\14\0\3\u0375"+
    "\7\0\24\u0376\14\0\3\u0376\7\0\24\u0377\14\0\3\u0377"+
    "\7\0\24\u0378\14\0\3\u0378\7\0\24\u0379\14\0\3\u0379"+
    "\7\0\24\u037a\14\0\3\u037a\7\0\24\u037b\14\0\3\u037b"+
    "\7\0\24\u037c\14\0\3\u037c\7\0\24\u037d\14\0\3\u037d"+
    "\7\0\24\u037e\14\0\3\u037e\7\0\24\u037f\14\0\3\u037f"+
    "\7\0\24\u0380\14\0\3\u0380\7\0\24\u0381\14\0\3\u0381"+
    "\7\0\24\u0382\14\0\3\u0382\7\0\24\u0383\14\0\3\u0383"+
    "\7\0\24\u0384\14\0\3\u0384\7\0\24\u0385\14\0\3\u0385"+
    "\7\0\24\u0386\14\0\3\u0386\7\0\24\u0387\14\0\3\u0387"+
    "\7\0\24\u0388\14\0\3\u0388\7\0\24\u0389\14\0\3\u0389"+
    "\7\0\24\u038a\14\0\3\u038a\7\0\24\u038b\14\0\3\u038b"+
    "\7\0\24\u038c\14\0\3\u038c\7\0\24\u038d\14\0\3\u038d"+
    "\7\0\24\u038e\14\0\3\u038e\7\0\24\u038f\14\0\3\u038f"+
    "\7\0\24\u0390\14\0\3\u0390\7\0\24\u0391\14\0\3\u0391"+
    "\7\0\24\u0392\14\0\3\u0392\7\0\24\u0393\14\0\3\u0393"+
    "\7\0\24\u0394\14\0\3\u0394\7\0\24\u0395\14\0\3\u0395"+
    "\7\0\24\u0396\14\0\3\u0396\7\0\24\u0397\14\0\3\u0397"+
    "\7\0\24\u0398\14\0\3\u0398\7\0\24\u0399\14\0\3\u0399"+
    "\7\0\24\u039a\14\0\3\u039a\7\0\24\u039b\14\0\3\u039b"+
    "\7\0\24\u039c\14\0\3\u039c\7\0\24\u039d\14\0\3\u039d"+
    "\7\0\24\u039e\14\0\3\u039e\7\0\24\u039f\14\0\3\u039f"+
    "\7\0\24\u03a0\14\0\3\u03a0\7\0\24\u03a1\14\0\3\u03a1"+
    "\7\0\24\u03a2\14\0\3\u03a2\7\0\24\u03a3\14\0\3\u03a3"+
    "\7\0\24\u03a4\14\0\3\u03a4\7\0\24\u03a5\14\0\3\u03a5"+
    "\7\0\24\u03a6\14\0\3\u03a6\7\0\24\u03a7\14\0\3\u03a7"+
    "\7\0\24\u03a8\14\0\3\u03a8\7\0\24\u03a9\14\0\3\u03a9"+
    "\7\0\24\u03aa\14\0\3\u03aa\7\0\24\u03ab\14\0\3\u03ab"+
    "\7\0\24\u03ac\14\0\3\u03ac\7\0\24\u03ad\14\0\3\u03ad"+
    "\7\0\24\u03ae\14\0\3\u03ae\7\0\24\u03af\14\0\3\u03af"+
    "\7\0\24\u03b0\14\0\3\u03b0\7\0\24\u03b1\14\0\3\u03b1"+
    "\7\0\24\u03b2\14\0\3\u03b2\7\0\24\u03b3\14\0\3\u03b3"+
    "\7\0\24\u03b4\14\0\3\u03b4\7\0\24\u03b5\14\0\3\u03b5"+
    "\7\0\24\u03b6\14\0\3\u03b6\7\0\24\u03b7\14\0\3\u03b7"+
    "\7\0\24\u03b8\14\0\3\u03b8\7\0\24\u03b9\14\0\3\u03b9"+
    "\7\0\24\u03ba\14\0\3\u03ba\7\0\24\u03bb\14\0\3\u03bb"+
    "\7\0\24\u03bc\14\0\3\u03bc\7\0\24\u03bd\14\0\3\u03bd"+
    "\7\0\24\u03be\14\0\3\u03be\7\0\24\u03bf\14\0\3\u03bf"+
    "\7\0\24\u03c0\14\0\3\u03c0\7\0\24\u03c1\14\0\3\u03c1"+
    "\7\0\24\u03c2\14\0\3\u03c2\7\0\24\u03c3\14\0\3\u03c3"+
    "\7\0\24\u03c4\14\0\3\u03c4\7\0\24\u03c5\14\0\3\u03c5"+
    "\7\0\24\u03c6\14\0\3\u03c6\7\0\24\u03c7\14\0\3\u03c7"+
    "\7\0\24\u03c8\14\0\3\u03c8\7\0\24\u03c9\14\0\3\u03c9"+
    "\7\0\24\u03ca\14\0\3\u03ca\7\0\24\u03cb\14\0\3\u03cb"+
    "\7\0\24\u03cc\14\0\3\u03cc\7\0\24\u03cd\14\0\3\u03cd"+
    "\7\0\24\u03ce\14\0\3\u03ce\7\0\24\u03cf\14\0\3\u03cf"+
    "\7\0\24\u03d0\14\0\3\u03d0\7\0\24\u03d1\14\0\3\u03d1"+
    "\7\0\24\u03d2\14\0\3\u03d2\7\0\24\u03d3\14\0\3\u03d3"+
    "\7\0\24\u03d4\14\0\3\u03d4\7\0\24\u03d5\14\0\3\u03d5"+
    "\7\0\24\u03d6\14\0\3\u03d6\7\0\24\u03d7\14\0\3\u03d7"+
    "\7\0\24\u03d8\14\0\3\u03d8\7\0\24\u03d9\14\0\3\u03d9"+
    "\7\0\24\u03da\14\0\3\u03da\7\0\24\u03db\14\0\3\u03db"+
    "\7\0\24\u03dc\14\0\3\u03dc\7\0\24\u03dd\14\0\3\u03dd"+
    "\7\0\24\u03de\14\0\3\u03de\7\0\24\u03df\14\0\3\u03df"+
    "\7\0\24\u03e0\14\0\3\u03e0\7\0\24\u03e1\14\0\3\u03e1"+
    "\7\0\24\u03e2\14\0\3\u03e2\7\0\24\u03e3\14\0\3\u03e3"+
    "\7\0\24\u03e4\14\0\3\u03e4\7\0\24\u03e5\14\0\3\u03e5"+
    "\7\0\24\u03e6\14\0\3\u03e6\7\0\24\u03e7\14\0\3\u03e7"+
    "\7\0\24\u03e8\14\0\3\u03e8\7\0\24\u03e9\14\0\3\u03e9"+
    "\7\0\24\u03ea\14\0\3\u03ea\7\0\24\u03eb\14\0\3\u03eb"+
    "\7\0\24\u03ec\14\0\3\u03ec\7\0\24\u03ed\14\0\3\u03ed"+
    "\7\0\24\u03ee\14\0\3\u03ee\7\0\24\u03ef\14\0\3\u03ef"+
    "\7\0\24\u03f0\14\0\3\u03f0\7\0\24\u03f1\14\0\3\u03f1"+
    "\7\0\24\u03f2\14\0\3\u03f2\7\0\24\u03f3\14\0\3\u03f3"+
    "\7\0\24\u03f4\14\0\3\u03f4\7\0\24\u03f5\14\0\3\u03f5"+
    "\7\0\24\u03f6\14\0\3\u03f6\7\0\24\u03f7\14\0\3\u03f7"+
    "\7\0\24\u03f8\14\0\3\u03f8\7\0\24\u03f9\14\0\3\u03f9"+
    "\7\0\24\u03fa\14\0\3\u03fa\7\0\24\u03fb\14\0\3\u03fb"+
    "\7\0\24\u03fc\14\0\3\u03fc\7\0\24\u03fd\14\0\3\u03fd"+
    "\7\0\24\u03fe\14\0\3\u03fe\7\0\24\u03ff\14\0\3\u03ff"+
    "\7\0\24\u0400\14\0\3\u0400\7\0\24\u0401\14\0\3\u0401"+
    "\7\0\24\u0402\14\0\3\u0402\7\0\24\u0403\14\0\3\u0403"+
    "\7\0\24\u0404\14\0\3\u0404\7\0\24\u0405\14\0\3\u0405"+
    "\7\0\24\u0406\14\0\3\u0406\7\0\24\u0407\14\0\3\u0407"+
    "\7\0\24\u0408\14\0\3\u0408\7\0\24\u0409\14\0\3\u0409"+
    "\7\0\24\u040a\14\0\3\u040a\7\0\24\u040b\14\0\3\u040b"+
    "\7\0\24\u040c\14\0\3\u040c\7\0\24\u040d\14\0\3\u040d"+
    "\7\0\24\u040e\14\0\3\u040e\7\0\24\u040f\14\0\3\u040f"+
    "\7\0\24\u0410\14\0\3\u0410\7\0\24\u0411\14\0\3\u0411"+
    "\7\0\24\u0412\14\0\3\u0412\7\0\24\u0413\14\0\3\u0413"+
    "\7\0\24\u0414\14\0\3\u0414\7\0\24\u0415\14\0\3\u0415"+
    "\7\0\24\u0416\14\0\3\u0416\7\0\24\u0417\14\0\3\u0417"+
    "\7\0\24\u0418\14\0\3\u0418\7\0\24\u0419\14\0\3\u0419"+
    "\7\0\24\u041a\14\0\3\u041a\7\0\24\u041b\14\0\3\u041b"+
    "\7\0\24\u041c\14\0\3\u041c\7\0\24\u041d\14\0\3\u041d"+
    "\7\0\24\u041e\14\0\3\u041e\7\0\24\u041f\14\0\3\u041f"+
    "\7\0\24\u0420\14\0\3\u0420\7\0\24\u0421\14\0\3\u0421"+
    "\7\0\24\u0422\14\0\3\u0422\7\0\24\u0423\14\0\3\u0423"+
    "\7\0\24\u0424\14\0\3\u0424\7\0\24\u0425\14\0\3\u0425"+
    "\7\0\24\u0426\14\0\3\u0426\7\0\24\u0427\14\0\3\u0427"+
    "\7\0\24\u0428\14\0\3\u0428\7\0\24\u0429\14\0\3\u0429"+
    "\7\0\24\u042a\14\0\3\u042a\7\0\24\u042b\14\0\3\u042b"+
    "\7\0\24\u042c\14\0\3\u042c\7\0\24\u042d\14\0\3\u042d"+
    "\7\0\24\u042e\14\0\3\u042e\7\0\24\u042f\14\0\3\u042f"+
    "\7\0\24\u0430\14\0\3\u0430\7\0\24\u0431\14\0\3\u0431"+
    "\7\0\24\u0432\14\0\3\u0432\7\0\24\u0433\14\0\3\u0433"+
    "\7\0\24\u0434\14\0\3\u0434\7\0\24\u0435\14\0\3\u0435"+
    "\7\0\24\u0436\14\0\3\u0436\7\0\24\u0437\14\0\3\u0437"+
    "\7\0\24\u0438\14\0\3\u0438\7\0\24\u0439\14\0\3\u0439"+
    "\7\0\24\u043a\14\0\3\u043a\7\0\24\u043b\14\0\3\u043b"+
    "\7\0\24\u043c\14\0\3\u043c\7\0\24\u043d\14\0\3\u043d"+
    "\7\0\24\u043e\14\0\3\u043e\7\0\24\u043f\14\0\3\u043f"+
    "\7\0\24\u0440\14\0\3\u0440\7\0\24\u0441\14\0\3\u0441"+
    "\7\0\24\u0442\14\0\3\u0442\7\0\24\u0443\14\0\3\u0443"+
    "\7\0\24\u0444\14\0\3\u0444\7\0\24\u0445\14\0\3\u0445"+
    "\7\0\24\u0446\14\0\3\u0446\7\0\24\u0447\14\0\3\u0447"+
    "\7\0\24\u0448\14\0\3\u0448\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[44478];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\15\1\1\11\1\1\1\11\1\1\3\11"+
    "\2\1\3\11\4\1\1\11\22\1\1\11\1\1\3\11"+
    "\2\1\1\11\u040c\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1096];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    boolean tokens = false;
    public int symbol;

    private Symbol symbol(int type){
        symbol = type;
        return new Symbol(type,yyline,yycolumn);
    }

    private Symbol symbol(int type, Object value){
        symbol = type;
        return new Symbol(type,yyline,yycolumn, value);
    }

    public Token yylex() {
        return new Token(yytext(),symbol,yyline,yycolumn,yychar);
    }

    public void tokens(boolean tokens){
        this.tokens = tokens;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexiconParser(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF,"");
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(sym.CHAR_INVALIDO, yytext());
            }
          case 45: break;
          case 2: 
            { /****/
            }
          case 46: break;
          case 3: 
            { return symbol(sym.IDENTIFICADOR, yytext());
            }
          case 47: break;
          case 4: 
            { return symbol(sym.PONTO_VIRGULA, yytext());
            }
          case 48: break;
          case 5: 
            { return symbol(sym.DOIS_PONTOS, yytext());
            }
          case 49: break;
          case 6: 
            { return symbol(sym.VIRGULA, yytext());
            }
          case 50: break;
          case 7: 
            { return symbol(sym.PONTO, yytext());
            }
          case 51: break;
          case 8: 
            { return symbol(sym.ABRE_PARENTESES, yytext());
            }
          case 52: break;
          case 9: 
            { return symbol(sym.FECHA_PARENTESES, yytext());
            }
          case 53: break;
          case 10: 
            { return symbol(sym.OPERACAO_IGUAL, yytext());
            }
          case 54: break;
          case 11: 
            { return symbol(sym.OPERACAO_MENOR, yytext());
            }
          case 55: break;
          case 12: 
            { return symbol(sym.OPERACAO_MAIOR, yytext());
            }
          case 56: break;
          case 13: 
            { return symbol(sym.OPERACAO_SOMA, yytext());
            }
          case 57: break;
          case 14: 
            { return symbol(sym.OPERACAO_SUB, yytext());
            }
          case 58: break;
          case 15: 
            { return symbol(sym.OPERACAO_MULT, yytext());
            }
          case 59: break;
          case 16: 
            { return symbol(sym.NUMERO_INTEIRO, yytext());
            }
          case 60: break;
          case 17: 
            { return symbol(sym.COMENTARIO_BLOCO_SEM_FECHAR, "{");
            }
          case 61: break;
          case 18: 
            { return symbol(sym.COMENTARIO_BLOCO_SEM_ABRIR, "}");
            }
          case 62: break;
          case 19: 
            { return symbol(sym.OPERACAO_OR, yytext());
            }
          case 63: break;
          case 20: 
            { return symbol(sym.RESERVADO_DO, yytext());
            }
          case 64: break;
          case 21: 
            { return symbol(sym.RESERVADO_IF, yytext());
            }
          case 65: break;
          case 22: 
            { return symbol(sym.SIMBOLO_ATRIBUICAO, yytext());
            }
          case 66: break;
          case 23: 
            { return symbol(sym.NUMERO_REAL_FORMATO_RUIM, yytext());
            }
          case 67: break;
          case 24: 
            { return symbol(sym.OPERACAO_MENOR_IGUAL, yytext());
            }
          case 68: break;
          case 25: 
            { return symbol(sym.OPERACAO_DIFERENTE, yytext());
            }
          case 69: break;
          case 26: 
            { return symbol(sym.OPERACAO_MAIOR_IGUAL, yytext());
            }
          case 70: break;
          case 27: 
            { if (tokens) return symbol(sym.COMENTARIO_LINHA, yytext());
            }
          case 71: break;
          case 28: 
            { return symbol(sym.OPERACAO_AND, yytext());
            }
          case 72: break;
          case 29: 
            { return symbol(sym.RESERVADO_VAR, yytext());
            }
          case 73: break;
          case 30: 
            { return symbol(sym.RESERVADO_END, yytext());
            }
          case 74: break;
          case 31: 
            { return symbol(sym.OPERACAO_DIV, yytext());
            }
          case 75: break;
          case 32: 
            { return symbol(sym.RESERVADO_INTEGER, yytext());
            }
          case 76: break;
          case 33: 
            { return symbol(sym.OPERACAO_NOT, yytext());
            }
          case 77: break;
          case 34: 
            { return symbol(sym.NUMERO_REAL, yytext());
            }
          case 78: break;
          case 35: 
            { return symbol(sym.RESERVADO_ELSE, yytext());
            }
          case 79: break;
          case 36: 
            { return symbol(sym.RESERVADO_TRUE, yytext());
            }
          case 80: break;
          case 37: 
            { return symbol(sym.RESERVADO_THEN, yytext());
            }
          case 81: break;
          case 38: 
            { return symbol(sym.RESERVADO_BEGIN, yytext());
            }
          case 82: break;
          case 39: 
            { return symbol(sym.RESERVADO_FALSE, yytext());
            }
          case 83: break;
          case 40: 
            { return symbol(sym.RESERVADO_WHILE, yytext());
            }
          case 84: break;
          case 41: 
            { return symbol(sym.RESERVADO_PROGRAM, yytext());
            }
          case 85: break;
          case 42: 
            { return symbol(sym.RESERVADO_BOOLEAN, yytext());
            }
          case 86: break;
          case 43: 
            { return symbol(sym.RESERVADO_PROCEDURE, yytext());
            }
          case 87: break;
          case 44: 
            { return symbol(sym.IDENTIFICADOR_MUITO_GRANDE, yytext());
            }
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
